<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">www.example.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="scheme" elementType="Argument">
            <stringProp name="Argument.name">scheme</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ThinkTime" elementType="Argument">
            <stringProp name="Argument.name">ThinkTime</stringProp>
            <stringProp name="Argument.value">2000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Mili SEC</stringProp>
          </elementProp>
          <elementProp name="runNo" elementType="Argument">
            <stringProp name="Argument.name">runNo</stringProp>
            <stringProp name="Argument.value">run1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="basePathExecution" elementType="Argument">
            <stringProp name="Argument.name">basePathExecution</stringProp>
            <stringProp name="Argument.value">execution</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CsvPath_CreatedCustomer" elementType="Argument">
            <stringProp name="Argument.name">CsvPath_CreatedCustomer</stringProp>
            <stringProp name="Argument.value">\\Core_Output_CreatedCustomer.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Customer Created</stringProp>
          </elementProp>
          <elementProp name="CreateOnBoardingCusomter_NUM_Threads" elementType="Argument">
            <stringProp name="Argument.name">CreateOnBoardingCusomter_NUM_Threads</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">7</stringProp>
          </elementProp>
          <elementProp name="CreateOnBoardingCusomter_RampUp" elementType="Argument">
            <stringProp name="Argument.name">CreateOnBoardingCusomter_RampUp</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">SEC 600</stringProp>
          </elementProp>
          <elementProp name="CreateOnBoardingCusomter_RampDown" elementType="Argument">
            <stringProp name="Argument.name">CreateOnBoardingCusomter_RampDown</stringProp>
            <stringProp name="Argument.value">600</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">SEC 600 </stringProp>
          </elementProp>
          <elementProp name="CreateOnBoardingCusomter_SteadyState" elementType="Argument">
            <stringProp name="Argument.name">CreateOnBoardingCusomter_SteadyState</stringProp>
            <stringProp name="Argument.value">6000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">7200 SEC 6000</stringProp>
          </elementProp>
          <elementProp name="CsvPath_CreateAccount" elementType="Argument">
            <stringProp name="Argument.name">CsvPath_CreateAccount</stringProp>
            <stringProp name="Argument.value">\\Core_Output_CreatedAccount.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Account Created</stringProp>
          </elementProp>
          <elementProp name="CreateAccount_Threads" elementType="Argument">
            <stringProp name="Argument.name">CreateAccount_Threads</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CreateAccount_RampUp" elementType="Argument">
            <stringProp name="Argument.name">CreateAccount_RampUp</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CreateAccount_RampDown" elementType="Argument">
            <stringProp name="Argument.name">CreateAccount_RampDown</stringProp>
            <stringProp name="Argument.value">600</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CreateAccount_SteadyState" elementType="Argument">
            <stringProp name="Argument.name">CreateAccount_SteadyState</stringProp>
            <stringProp name="Argument.value">6000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CsvPath_CreatePaymentOrder" elementType="Argument">
            <stringProp name="Argument.name">CsvPath_CreatePaymentOrder</stringProp>
            <stringProp name="Argument.value">\\Core_Output_CreatePaymentOrder.csv</stringProp>
            <stringProp name="Argument.desc">Payment Order CSV</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CreatePaymentOrder_Threads" elementType="Argument">
            <stringProp name="Argument.name">CreatePaymentOrder_Threads</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CreatePaymentOrder_RampUp" elementType="Argument">
            <stringProp name="Argument.name">CreatePaymentOrder_RampUp</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CreatePaymentOrder_RampDown" elementType="Argument">
            <stringProp name="Argument.name">CreatePaymentOrder_RampDown</stringProp>
            <stringProp name="Argument.value">600</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CreatePaymentOrder_SteadyState" elementType="Argument">
            <stringProp name="Argument.name">CreatePaymentOrder_SteadyState</stringProp>
            <stringProp name="Argument.value">6000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CsvPath_CreateCD" elementType="Argument">
            <stringProp name="Argument.name">CsvPath_CreateCD</stringProp>
            <stringProp name="Argument.value">\\Core_Output_CreatedCD.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Created CD</stringProp>
          </elementProp>
          <elementProp name="Create_CD_Threads" elementType="Argument">
            <stringProp name="Argument.name">Create_CD_Threads</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Create_CD_RampUp" elementType="Argument">
            <stringProp name="Argument.name">Create_CD_RampUp</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Create_CD_Rampdown" elementType="Argument">
            <stringProp name="Argument.name">Create_CD_Rampdown</stringProp>
            <stringProp name="Argument.value">600</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Create_CD_SteadyState" elementType="Argument">
            <stringProp name="Argument.name">Create_CD_SteadyState</stringProp>
            <stringProp name="Argument.value">6000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CsvPath_CreateACHPayment" elementType="Argument">
            <stringProp name="Argument.name">CsvPath_CreateACHPayment</stringProp>
            <stringProp name="Argument.value">\\Core_Output_CreatedACHpayment.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Created ACH</stringProp>
          </elementProp>
          <elementProp name="CreateACHPayment_Threads" elementType="Argument">
            <stringProp name="Argument.name">CreateACHPayment_Threads</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CreateACHPayment_RampUp" elementType="Argument">
            <stringProp name="Argument.name">CreateACHPayment_RampUp</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CreateACHPayment_Rampdown" elementType="Argument">
            <stringProp name="Argument.name">CreateACHPayment_Rampdown</stringProp>
            <stringProp name="Argument.value">600</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CreateACHPayment_SteadyState" elementType="Argument">
            <stringProp name="Argument.name">CreateACHPayment_SteadyState</stringProp>
            <stringProp name="Argument.value">6000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CSV_GetAccount_Details" elementType="Argument">
            <stringProp name="Argument.name">CSV_GetAccount_Details</stringProp>
            <stringProp name="Argument.value">\\Core_Output_GetAccountDetails.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Get_AcoountBalance_Threads" elementType="Argument">
            <stringProp name="Argument.name">Get_AcoountBalance_Threads</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Get_AcoountBalance_RampUp" elementType="Argument">
            <stringProp name="Argument.name">Get_AcoountBalance_RampUp</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Get_AcoountBalance_RampDown" elementType="Argument">
            <stringProp name="Argument.name">Get_AcoountBalance_RampDown</stringProp>
            <stringProp name="Argument.value">600</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Get_AcoountBalance_SteadyState" elementType="Argument">
            <stringProp name="Argument.name">Get_AcoountBalance_SteadyState</stringProp>
            <stringProp name="Argument.value">6000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CsvPath_CardNumber" elementType="Argument">
            <stringProp name="Argument.name">CsvPath_CardNumber</stringProp>
            <stringProp name="Argument.value">\\Core_Output_CreatedCardNumber.csv</stringProp>
            <stringProp name="Argument.desc">Created Card Numbers</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IssuanceOfCard_Threads" elementType="Argument">
            <stringProp name="Argument.name">IssuanceOfCard_Threads</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IssuanceOfCard_RampUp" elementType="Argument">
            <stringProp name="Argument.name">IssuanceOfCard_RampUp</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IssuanceOfCard_RampDown" elementType="Argument">
            <stringProp name="Argument.name">IssuanceOfCard_RampDown</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IssuanceOfCard_SteadyState" elementType="Argument">
            <stringProp name="Argument.name">IssuanceOfCard_SteadyState</stringProp>
            <stringProp name="Argument.value">180</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CsvPath_PaymentReverse" elementType="Argument">
            <stringProp name="Argument.name">CsvPath_PaymentReverse</stringProp>
            <stringProp name="Argument.value">\\Core_Output_PaymentReverse.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PaymentReverse_Num_Threads" elementType="Argument">
            <stringProp name="Argument.name">PaymentReverse_Num_Threads</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PaymentReverse_RampUp" elementType="Argument">
            <stringProp name="Argument.name">PaymentReverse_RampUp</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PaymentReverse_RampDown" elementType="Argument">
            <stringProp name="Argument.name">PaymentReverse_RampDown</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PaymentReverse_SteadyState" elementType="Argument">
            <stringProp name="Argument.name">PaymentReverse_SteadyState</stringProp>
            <stringProp name="Argument.value">60</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CsvPath_UpdateCustomerPostingRestraction" elementType="Argument">
            <stringProp name="Argument.name">CsvPath_UpdateCustomerPostingRestraction</stringProp>
            <stringProp name="Argument.value">\\Core_Output_UpdateCustomerPostingRestraction.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Update_CustomerPostingRestriction_Threads" elementType="Argument">
            <stringProp name="Argument.name">Update_CustomerPostingRestriction_Threads</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Update_CustomerPostingRestriction_RampUp" elementType="Argument">
            <stringProp name="Argument.name">Update_CustomerPostingRestriction_RampUp</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Update_CustomerPostingRestriction_Rampdown" elementType="Argument">
            <stringProp name="Argument.name">Update_CustomerPostingRestriction_Rampdown</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Update_CustomerPostingRestriction_SteadyState" elementType="Argument">
            <stringProp name="Argument.name">Update_CustomerPostingRestriction_SteadyState</stringProp>
            <stringProp name="Argument.value">60</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CsvPath_GetCustomerPostingRestriction" elementType="Argument">
            <stringProp name="Argument.name">CsvPath_GetCustomerPostingRestriction</stringProp>
            <stringProp name="Argument.value">\\Core_Output_GetCustomerPostingRestriction.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetCustomerPostingRestriction_Threads" elementType="Argument">
            <stringProp name="Argument.name">GetCustomerPostingRestriction_Threads</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetCustomerPostingRestriction_RampUp" elementType="Argument">
            <stringProp name="Argument.name">GetCustomerPostingRestriction_RampUp</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetCustomerPostingRestriction_RampDown" elementType="Argument">
            <stringProp name="Argument.name">GetCustomerPostingRestriction_RampDown</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetCustomerPostingRestriction_SteadyState" elementType="Argument">
            <stringProp name="Argument.name">GetCustomerPostingRestriction_SteadyState</stringProp>
            <stringProp name="Argument.value">60</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CsvPath_UpdateAccountPostingRestriction" elementType="Argument">
            <stringProp name="Argument.name">CsvPath_UpdateAccountPostingRestriction</stringProp>
            <stringProp name="Argument.value">\\Core_Output_UpdateAccountPostingRestriction.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UpdateAccountPostingRestriction_Threads" elementType="Argument">
            <stringProp name="Argument.name">UpdateAccountPostingRestriction_Threads</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UpdateAccountPostingRestriction_RampUp" elementType="Argument">
            <stringProp name="Argument.name">UpdateAccountPostingRestriction_RampUp</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UpdateAccountPostingRestriction_RampDown" elementType="Argument">
            <stringProp name="Argument.name">UpdateAccountPostingRestriction_RampDown</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UpdateAccountPostingRestriction_SteadyState" elementType="Argument">
            <stringProp name="Argument.name">UpdateAccountPostingRestriction_SteadyState</stringProp>
            <stringProp name="Argument.value">60</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CsvPath_GetAccountPostingRestriction" elementType="Argument">
            <stringProp name="Argument.name">CsvPath_GetAccountPostingRestriction</stringProp>
            <stringProp name="Argument.value">\\Core_Output_GetAccountPostingRestriction.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetAccountPostingRestriction_Threads" elementType="Argument">
            <stringProp name="Argument.name">GetAccountPostingRestriction_Threads</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetAccountPostingRestriction_RampUp" elementType="Argument">
            <stringProp name="Argument.name">GetAccountPostingRestriction_RampUp</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetAccountPostingRestriction_RampDown" elementType="Argument">
            <stringProp name="Argument.name">GetAccountPostingRestriction_RampDown</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetAccountPostingRestriction_SteadyState" elementType="Argument">
            <stringProp name="Argument.name">GetAccountPostingRestriction_SteadyState</stringProp>
            <stringProp name="Argument.value">60</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CsvPath_GetAccountSummary" elementType="Argument">
            <stringProp name="Argument.name">CsvPath_GetAccountSummary</stringProp>
            <stringProp name="Argument.value">\\Core_Output_GetAccountSummary.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetAccountSummary_Threads" elementType="Argument">
            <stringProp name="Argument.name">GetAccountSummary_Threads</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetAccountSummary_RampUp" elementType="Argument">
            <stringProp name="Argument.name">GetAccountSummary_RampUp</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetAccountSummary_RampDown" elementType="Argument">
            <stringProp name="Argument.name">GetAccountSummary_RampDown</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetAccountSummary_SteadyState" elementType="Argument">
            <stringProp name="Argument.name">GetAccountSummary_SteadyState</stringProp>
            <stringProp name="Argument.value">60</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CsvPath_CreateSweep" elementType="Argument">
            <stringProp name="Argument.name">CsvPath_CreateSweep</stringProp>
            <stringProp name="Argument.value">\\Core_Output_CreateSweep.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CreateSweep_Threads" elementType="Argument">
            <stringProp name="Argument.name">CreateSweep_Threads</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CreateSweep_RampUp" elementType="Argument">
            <stringProp name="Argument.name">CreateSweep_RampUp</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CreateSweep_RampDown" elementType="Argument">
            <stringProp name="Argument.name">CreateSweep_RampDown</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CreateSweep_RampDown" elementType="Argument">
            <stringProp name="Argument.name">CreateSweep_RampDown</stringProp>
            <stringProp name="Argument.value">60</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CsvPath_CreateStandingOrder" elementType="Argument">
            <stringProp name="Argument.name">CsvPath_CreateStandingOrder</stringProp>
            <stringProp name="Argument.value">\\Core_Output_CreateStandingOrder.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CreateStandingOrder_Threads" elementType="Argument">
            <stringProp name="Argument.name">CreateStandingOrder_Threads</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CreateStandingOrder_RampUp" elementType="Argument">
            <stringProp name="Argument.name">CreateStandingOrder_RampUp</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CreateStandingOrder_RampDown" elementType="Argument">
            <stringProp name="Argument.name">CreateStandingOrder_RampDown</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CreateStandingOrder_SteadyState" elementType="Argument">
            <stringProp name="Argument.name">CreateStandingOrder_SteadyState</stringProp>
            <stringProp name="Argument.value">60</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CaptureBill_Threads" elementType="Argument">
            <stringProp name="Argument.name">CaptureBill_Threads</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CaptureBill_RampUp" elementType="Argument">
            <stringProp name="Argument.name">CaptureBill_RampUp</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CaptureBill_RampDown" elementType="Argument">
            <stringProp name="Argument.name">CaptureBill_RampDown</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CaptureBill_SteadyState" elementType="Argument">
            <stringProp name="Argument.name">CaptureBill_SteadyState</stringProp>
            <stringProp name="Argument.value">60</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CsvPath_CreateTD" elementType="Argument">
            <stringProp name="Argument.name">CsvPath_CreateTD</stringProp>
            <stringProp name="Argument.value">\\Core_Output_CreateTD.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CreateTD_Threads" elementType="Argument">
            <stringProp name="Argument.name">CreateTD_Threads</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CreateTD_RampUp" elementType="Argument">
            <stringProp name="Argument.name">CreateTD_RampUp</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CreateTD_RampDown" elementType="Argument">
            <stringProp name="Argument.name">CreateTD_RampDown</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CreateTD_SteadyState" elementType="Argument">
            <stringProp name="Argument.name">CreateTD_SteadyState</stringProp>
            <stringProp name="Argument.value">60</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetKYC_Threads" elementType="Argument">
            <stringProp name="Argument.name">GetKYC_Threads</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetKYC_RampUp" elementType="Argument">
            <stringProp name="Argument.name">GetKYC_RampUp</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetKYC_RampDown" elementType="Argument">
            <stringProp name="Argument.name">GetKYC_RampDown</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetKYC_SteadyState" elementType="Argument">
            <stringProp name="Argument.name">GetKYC_SteadyState</stringProp>
            <stringProp name="Argument.value">60</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CsvPath_GetPaymentOrderDetails" elementType="Argument">
            <stringProp name="Argument.name">CsvPath_GetPaymentOrderDetails</stringProp>
            <stringProp name="Argument.value">\\Core_Output_GetPaymentOrderDetails.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetPaymentOrderDetails_Threads" elementType="Argument">
            <stringProp name="Argument.name">GetPaymentOrderDetails_Threads</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetPaymentOrderDetails_RampUp" elementType="Argument">
            <stringProp name="Argument.name">GetPaymentOrderDetails_RampUp</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetPaymentOrderDetails_RampDown" elementType="Argument">
            <stringProp name="Argument.name">GetPaymentOrderDetails_RampDown</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetPaymentOrderDetails_SteadyState" elementType="Argument">
            <stringProp name="Argument.name">GetPaymentOrderDetails_SteadyState</stringProp>
            <stringProp name="Argument.value">60</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetDeposit_Threads" elementType="Argument">
            <stringProp name="Argument.name">GetDeposit_Threads</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetDeposit_RampUp" elementType="Argument">
            <stringProp name="Argument.name">GetDeposit_RampUp</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetDeposit_RampDown" elementType="Argument">
            <stringProp name="Argument.name">GetDeposit_RampDown</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetDeposit_SteadyState" elementType="Argument">
            <stringProp name="Argument.name">GetDeposit_SteadyState</stringProp>
            <stringProp name="Argument.value">60</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CsvPath_CreateEGRTGSPayment" elementType="Argument">
            <stringProp name="Argument.name">CsvPath_CreateEGRTGSPayment</stringProp>
            <stringProp name="Argument.value">\\Core_Output_CreateEGRTGSPayment.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CreateOutgoingTransfer_Threads" elementType="Argument">
            <stringProp name="Argument.name">CreateOutgoingTransfer_Threads</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CreateOutgoingTransfer_RampUP" elementType="Argument">
            <stringProp name="Argument.name">CreateOutgoingTransfer_RampUP</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CreateOutgoingTransfer_SteadyState" elementType="Argument">
            <stringProp name="Argument.name">CreateOutgoingTransfer_SteadyState</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CreateOutgoingTransfer_RampDown" elementType="Argument">
            <stringProp name="Argument.name">CreateOutgoingTransfer_RampDown</stringProp>
            <stringProp name="Argument.value">60</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Get_DepositPerCus_Threads" elementType="Argument">
            <stringProp name="Argument.name">Get_DepositPerCus_Threads</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Get_DepositPerCus_RampUp" elementType="Argument">
            <stringProp name="Argument.name">Get_DepositPerCus_RampUp</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Get_DepositPerCus_RampDown" elementType="Argument">
            <stringProp name="Argument.name">Get_DepositPerCus_RampDown</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Get_DepositPerCus_SteadyState" elementType="Argument">
            <stringProp name="Argument.name">Get_DepositPerCus_SteadyState</stringProp>
            <stringProp name="Argument.value">60</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CsvPath_CreatedGoals" elementType="Argument">
            <stringProp name="Argument.name">CsvPath_CreatedGoals</stringProp>
            <stringProp name="Argument.value">\\Core_Output_CreatedGoals.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CreateSavingGoal_threads" elementType="Argument">
            <stringProp name="Argument.name">CreateSavingGoal_threads</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CreateSavingGoal_RampUp" elementType="Argument">
            <stringProp name="Argument.name">CreateSavingGoal_RampUp</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CreateSavingGoal_RampDown" elementType="Argument">
            <stringProp name="Argument.name">CreateSavingGoal_RampDown</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CreateSavingGoal_SteadyState" elementType="Argument">
            <stringProp name="Argument.name">CreateSavingGoal_SteadyState</stringProp>
            <stringProp name="Argument.value">60</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CsvPath_AccountClosureAA_ID" elementType="Argument">
            <stringProp name="Argument.name">CsvPath_AccountClosureAA_ID</stringProp>
            <stringProp name="Argument.value">\\Core_Output_AccountClosureAA_ID.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AccountClosure_Users" elementType="Argument">
            <stringProp name="Argument.name">AccountClosure_Users</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AccountClosure_RampUp" elementType="Argument">
            <stringProp name="Argument.name">AccountClosure_RampUp</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AccountClosure_RampDown" elementType="Argument">
            <stringProp name="Argument.name">AccountClosure_RampDown</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AccountClosure_SteadyState" elementType="Argument">
            <stringProp name="Argument.name">AccountClosure_SteadyState</stringProp>
            <stringProp name="Argument.value">60</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">
Systemname_output_apiname,Created Customer</stringProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">www.example.com</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp the Run Output folders" enabled="true">
        <stringProp name="TestPlan.comments">This Thread will run before the other threads thats included in the run get executed </stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Defined Variables To Setup Folders and needed files before the run" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="runNo" elementType="Argument">
              <stringProp name="Argument.name">runNo</stringProp>
              <stringProp name="Argument.value">run_${__time(MM_dd_YYYY_HHmm,)}\\</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Folder formate run_month_day_year_hourMins</stringProp>
            </elementProp>
            <elementProp name="basePathExecution" elementType="Argument">
              <stringProp name="Argument.name">basePathExecution</stringProp>
              <stringProp name="Argument.value">execution\\</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CoreFolder" elementType="Argument">
              <stringProp name="Argument.name">CoreFolder</stringProp>
              <stringProp name="Argument.value">Core\\</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CRMFolder" elementType="Argument">
              <stringProp name="Argument.name">CRMFolder</stringProp>
              <stringProp name="Argument.value">CRM\\</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SRsFolder" elementType="Argument">
              <stringProp name="Argument.name">SRsFolder</stringProp>
              <stringProp name="Argument.value">SRs\\</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="IVRFolder" elementType="Argument">
              <stringProp name="Argument.name">IVRFolder</stringProp>
              <stringProp name="Argument.value">IVR\\</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ATMFolder" elementType="Argument">
              <stringProp name="Argument.name">ATMFolder</stringProp>
              <stringProp name="Argument.value">ATM\\</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Create Execution folders for each run" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">//web folder for the Run as a whole with all the systems
def String runNo = vars.get(&quot;runNo&quot;);
def String basePath = vars.get(&quot;basePathExecution&quot;);
new File(basePath+runNo).mkdir()
def String pathBuilderWebFolder = basePath+runNo+&quot;web_&quot;+${__time(MMDDYYYY_HHMM,)};
new File(pathBuilderWebFolder).mkdir()
props.put(&quot;webFolder&quot;, pathBuilderWebFolder)



//Core Execution Run Folder Creation
def String CoreFolder = vars.get(&quot;CoreFolder&quot;);
new File(basePath+runNo+CoreFolder).mkdir();
def String pathBuilderCoreOutputFolder = basePath+runNo+CoreFolder+&quot;output_&quot;+${__time(MMDDYYYY_HHMM,)};
new File(pathBuilderCoreOutputFolder).mkdir();
props.put(&quot;coreOutputFolder&quot;, pathBuilderCoreOutputFolder)

//CRM Execution Run Folder Creation
def String CRMFolder = vars.get(&quot;CRMFolder&quot;);
new File(basePath+runNo+CRMFolder).mkdir();
def String pathBuilderCRMOutputFolder = basePath+runNo+CRMFolder+&quot;output_&quot;+${__time(MMDDYYYY_HHMM,)};
new File(pathBuilderCRMOutputFolder).mkdir();
props.put(&quot;CRMOutputFolder&quot;, pathBuilderCRMOutputFolder)

//IVR Execution Run Folder Creation
def String IVRFolder = vars.get(&quot;IVRFolder&quot;);
new File(basePath+runNo+IVRFolder).mkdir();
def String pathBuilderIVROutputFolder = basePath+runNo+IVRFolder+&quot;output_&quot;+${__time(MMDDYYYY_HHMM,)};
new File(pathBuilderIVROutputFolder).mkdir();
props.put(&quot;IVROutputFolder&quot;,pathBuilderIVROutputFolder)

//SRs Execution Run Folder Creation
def String SRsFolder = vars.get(&quot;SRsFolder&quot;);
new File(basePath+runNo+SRsFolder).mkdir();
def String pathBuilderSRsOutputFolder = basePath+runNo+SRsFolder+&quot;output_&quot;+${__time(MMDDYYYY_HHMM,)};
new File(pathBuilderSRsOutputFolder).mkdir();
props.put(&quot;SRsOutputFolder&quot;,pathBuilderSRsOutputFolder)

//ATM Execution Run Folder Creation
def String ATMFolder = vars.get(&quot;ATMFolder&quot;);
new File(basePath+runNo+ATMFolder).mkdir();
def String pathBuilderATMOutputFolder = basePath+runNo+ATMFolder+&quot;output_&quot;+${__time(MMDDYYYY_HHMM,)};
new File(pathBuilderATMOutputFolder).mkdir();
props.put(&quot;ATMOutputFolder&quot;,pathBuilderATMOutputFolder)



</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="+++ Create OnBoarding Customer +++ " enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="1299971605">
            <stringProp name="1275456860">${CreateOnBoardingCusomter_NUM_Threads}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="-825501759">${CreateOnBoardingCusomter_RampUp}</stringProp>
            <stringProp name="1457873773">${CreateOnBoardingCusomter_SteadyState}</stringProp>
            <stringProp name="1246027482">${CreateOnBoardingCusomter_RampDown}</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="+++ Create OnBoarding Customer +++ " enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_Core_API_CreateOnboardingCustomer_/MDIDELIV/api/v1.0.0/party/customers/onboarding/customer/(CustomerId)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
          		&quot;header&quot;:&#xd;
                  {&#xd;
                    &quot;override&quot;: {&#xd;
                          &quot;overrideDetails&quot;: [&#xd;
                              {&#xd;
                                  &quot;code&quot;: &quot;O-10203&quot;,&#xd;
                                  &quot;description&quot;: &quot;POSSIBLE DUPLICATE CONTRACT 9787&quot;,&#xd;
                                  &quot;id&quot;: &quot;DUP.CONTRACT&quot;,&#xd;
                             &quot;type&quot;: &quot;Override&quot;&#xd;
                              }        ]    }&#xd;
          		},&quot;body&quot;: {&#xd;
          		        &quot;language&quot;: &quot;1&quot;,&#xd;
          		        &quot;sectorId&quot;: &quot;1001&quot;,&#xd;
          	&quot;dateOfBirth&quot;: &quot;19940918&quot;,&#xd;
          		        &quot;nationalityId&quot;: &quot;EG&quot;,&#xd;
          		       &quot;gender&quot;: &quot;MALE&quot;,&#xd;
          		       &quot;title&quot;: &quot;DR&quot;,&#xd;
          		        &quot;givenName&quot;: &quot;  TEST H  &quot;,&#xd;
          	        &quot;streets&quot;: [&#xd;
          		            {&#xd;
          		               &quot;street&quot;: &quot;  TEST TEST &quot;&#xd;
          	           }&#xd;
          		        ],&#xd;
          	       &quot;customerNames&quot;: [&#xd;
          	&#xd;
          	{&#xd;
          		               &quot;customerName&quot;: &quot;  TEST HA  &quot;&#xd;
          		          },&#xd;
          	&#xd;
          	         {&#xd;
               }&#xd;
          &#xd;
          	       ],&#xd;
          	&#xd;
          	       &quot;displayNames&quot;:[&#xd;
          	&#xd;
          	         {&#xd;
          	&#xd;
          	               &quot;displayName&quot;: &quot; TESTing &quot;&#xd;
          	&#xd;
          		            }],&#xd;
          	&#xd;
          		 &quot;legalDetails&quot;: [&#xd;
          	      {&#xd;
          		   &quot;legalId&quot;:&quot;${legalId}&quot;,&#xd;
          		&quot;legalDocumentName&quot;: &quot;N&quot;,&#xd;
          	&quot;legalIssueDate&quot;: &quot;20200505&quot;&#xd;
          		 }&#xd;
          		   ],&#xd;
          		&quot;riskLevel&quot;: &quot;LOW&quot;&#xd;
   }&#xd;
          	&#xd;
          		}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">10.10.90.40</stringProp>
            <stringProp name="HTTPSampler.port">9446</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/MDIDELIV/api/v1.0.0/party/customers/onboarding/customer/${CutID}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
              <collectionProp name="AuthManager.auth_list">
                <elementProp name="" elementType="Authorization">
                  <stringProp name="Authorization.url">https://10.10.90.40:9446/MDIDELIV/api/v1.0.0/party/customers/onboarding/customer/</stringProp>
                  <stringProp name="Authorization.username">AUTOMATION.1</stringProp>
                  <stringProp name="Authorization.password">P@ssw0rd</stringProp>
                  <stringProp name="Authorization.domain"></stringProp>
                  <stringProp name="Authorization.realm"></stringProp>
                </elementProp>
              </collectionProp>
              <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
            </AuthManager>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="companyId" elementType="Header">
                  <stringProp name="Header.name">companyId</stringProp>
                  <stringProp name="Header.value">EG0011001</stringProp>
                </elementProp>
                <elementProp name="validate_only" elementType="Header">
                  <stringProp name="Header.name">validate_only</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">4d71d941-15d9-44ca-944a-26c07408e7a9</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.31.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Random CutID" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="65475261">CutID</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="267001829">
                  <stringProp name="-1611559354">1${__RandomString(9,1234567890,)}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Random legalId" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="55812532">legalId</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1618042943">
                  <stringProp name="557549205">${__RandomString(16,123456789,)}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.header.status</stringProp>
              <stringProp name="EXPECTED_VALUE">success</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Created_Customer" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Created_Customer</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.header.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="If Customer Created_WriteOutputFile" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">//Default separator
char SEPARATOR = &apos;,&apos;;


String csvFile = props.get(&quot;coreOutputFolder&quot;)+vars.get(&quot;CsvPath_CreatedCustomer&quot;)


def params = [&quot;Created Customer Number&quot;,vars.get(&quot;Created_Customer&quot;).toString(),&quot;&quot;,&quot;&quot;];

//function write line in csv
def writeLine(FileWriter writer, List&lt;String&gt; parameters, char separator) throws IOException {
    boolean firstParameter = true;
    StringBuilder stringBuilder = new StringBuilder();
    String parameter = &quot; &quot;;

    for (int i = 0; i &lt; parameters.size(); i++) {
        //get param
        parameter = parameters[i];
        log.info(parameter);

        //if the first param in the line, separator is not needed
        if (!firstParameter) {
            stringBuilder.append(separator);
        }

        //Add param to line
        stringBuilder.append(parameter);

        firstParameter = false;
    }

    //prepare file to next line
    stringBuilder.append(&quot;\n&quot;);

    //add to file the line
    log.info(stringBuilder.toString());
    writer.append(stringBuilder.toString());
}

FileWriter fileWriter = new FileWriter(csvFile, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">true</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="ThinkTime" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${ThinkTime}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="+++ Create Account +++ " enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="986340739">
            <stringProp name="1996210873">${CreateAccount_Threads}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="-945487253">${CreateAccount_RampUp}</stringProp>
            <stringProp name="-884059389">${CreateAccount_SteadyState}</stringProp>
            <stringProp name="1904084740">${CreateAccount_RampDown}</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="+++Create Account+++" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02_Core_API_CreateAccount_/MDICORE/api/v2.0.0/holdings/accounts/currentAccounts" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;header&quot;: {&#xd;
        &quot;override&quot;: {&#xd;
            &quot;overrideDetails&quot;: [&#xd;
                {&#xd;
                    &quot;code&quot;: &quot;${code}&quot;,&#xd;
                    &quot;description&quot;: &quot;Statement would get generated both on schedule date and the date defined in statement condition for CRINTEREST DRINTEREST&quot;,&#xd;
                    &quot;id&quot;: &quot;AA.PS.DUPLICATE.STATEMENT.GENERATE&quot;,&#xd;
                    &quot;type&quot;: &quot;Override&quot;&#xd;
                }&#xd;
            ]&#xd;
        }&#xd;
    },&#xd;
    &quot;body&quot;: {&#xd;
        &quot;parties&quot;: [&#xd;
            {&#xd;
                &quot;partyId&quot;: &quot;${partyId}&quot;&#xd;
            }&#xd;
        ],&#xd;
        &quot;productId&quot;: &quot;${productId}&quot;,&#xd;
        &quot;currencyId&quot;: &quot;${currencyId}&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">10.10.90.40</stringProp>
            <stringProp name="HTTPSampler.port">9446</stringProp>
            <stringProp name="HTTPSampler.protocol">HTTPS</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/MDICORE/api/v2.0.0/holdings/accounts/currentAccounts</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
              <collectionProp name="AuthManager.auth_list">
                <elementProp name="" elementType="Authorization">
                  <stringProp name="Authorization.url">https://10.10.90.40:9446/MDICORE/api/v2.0.0/holdings/accounts/currentAccounts</stringProp>
                  <stringProp name="Authorization.username">INPUTT</stringProp>
                  <stringProp name="Authorization.password">12345</stringProp>
                  <stringProp name="Authorization.domain"></stringProp>
                  <stringProp name="Authorization.realm"></stringProp>
                </elementProp>
              </collectionProp>
              <boolProp name="AuthManager.clearEachIteration">true</boolProp>
              <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
            </AuthManager>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">&lt;calculated when request is sent&gt;</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">&lt;calculated when request is sent&gt;</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CreateDefaultCurrentAccount CSV Data Set Config" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">testData\\input\\core\\CreateDefaultCurrentAccount.csv</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">code,partyId,productId,currencyId</stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AccountID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">AccountID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..balance.body.accountId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AccountAA" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">AccountAA</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.header.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="CustomerPrintCIF" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">CustomerPrintCIF</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..partyId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.header.status</stringProp>
              <stringProp name="EXPECTED_VALUE">success</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="If Account Created_WriteOutputFile" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">//Default separator
char SEPARATOR = &apos;,&apos;;

String csvFile = props.get(&quot;coreOutputFolder&quot;)+vars.get(&quot;CsvPath_CreateAccount&quot;)


def params = [&quot;account created ID&quot;,vars.get(&quot;AccountID&quot;).toString(),&quot;account created AA&quot;,vars.get(&quot;AccountAA&quot;).toString(),&quot;CIF Number&quot;,vars.get(&quot;CustomerPrintCIF&quot;).toString(),&quot;&quot;,&quot;&quot;];

//function write line in csv
def writeLine(FileWriter writer, List&lt;String&gt; parameters, char separator) throws IOException {
    boolean firstParameter = true;
    StringBuilder stringBuilder = new StringBuilder();
    String parameter = &quot; &quot;;

    for (int i = 0; i &lt; parameters.size(); i++) {
        //get param
        parameter = parameters[i];
        log.info(parameter);

        //if the first param in the line, separator is not needed
        if (!firstParameter) {
            stringBuilder.append(separator);
        }

        //Add param to line
        stringBuilder.append(parameter);

        firstParameter = false;
    }

    //prepare file to next line
    stringBuilder.append(&quot;\n&quot;);

    //add to file the line
    log.info(stringBuilder.toString());
    writer.append(stringBuilder.toString());
}

FileWriter fileWriter = new FileWriter(csvFile, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="ThinkTime" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${ThinkTime}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="+++ Create Payment Order +++ " enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="1590770155">
            <stringProp name="-1851777896">${CreatePaymentOrder_Threads}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="2116972716">${CreatePaymentOrder_RampUp}</stringProp>
            <stringProp name="-429611678">${CreatePaymentOrder_SteadyState}</stringProp>
            <stringProp name="-1419450107">${CreatePaymentOrder_RampDown}</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="+++ Create Payment Order +++" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03_Core_API_CreatePaymentOrder_/MDIDELIV/api/v1.0.0/order/createpaymentorder" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{   &quot;header&quot;:&#xd;
&#xd;
{&#xd;
&#xd;
&quot;override&quot;: {&#xd;
&#xd;
        &quot;overrideDetails&quot;: [&#xd;
&#xd;
            {&#xd;
&#xd;
                &quot;description&quot;: &quot;Post No Debits&quot;,&#xd;
&#xd;
                &quot;id&quot;: &quot;Post No Debits&quot;,&#xd;
&#xd;
                &quot;type&quot;: &quot;Override&quot;&#xd;
&#xd;
            },&#xd;
&#xd;
            {&#xd;
&#xd;
                &quot;description&quot;: &quot;Post No Entries&quot;,&#xd;
&#xd;
                &quot;id&quot;: &quot;Post No Entries&quot;,&#xd;
&#xd;
                &quot;type&quot;: &quot;Override&quot;&#xd;
&#xd;
            },&#xd;
&#xd;
            {&#xd;
&#xd;
                &quot;description&quot;: &quot;KYC Update&quot;,&#xd;
&#xd;
                &quot;id&quot;: &quot;KYC Update&quot;,&#xd;
&#xd;
                &quot;type&quot;: &quot;Override&quot;&#xd;
&#xd;
            },&#xd;
&#xd;
            {&#xd;
&#xd;
                &quot;code&quot;: &quot;O-12623&quot;,&#xd;
&#xd;
                &quot;description&quot;: &quot;Balance unavailable in debit account, Payment will be moved to credit risk queue for approval post authorisation&quot;,&#xd;
&#xd;
                &quot;id&quot;: &quot;PI-UNAUTH.OVERDRAFT.FOR.ONSUBMIT&quot;,&#xd;
&#xd;
                &quot;type&quot;: &quot;Override&quot;&#xd;
&#xd;
            }&#xd;
&#xd;
            &#xd;
&#xd;
        ]&#xd;
&#xd;
    }&#xd;
&#xd;
},&#xd;
&#xd;
    &quot;body&quot;:&#xd;
&#xd;
    {&#xd;
&#xd;
         &quot;amount&quot;: ${amount},&#xd;
&#xd;
&#xd;
&#xd;
        &quot;orderingCustomerId&quot;: &quot;${CustomerID}&quot;,&#xd;
&#xd;
&#xd;
&#xd;
        &quot;debitAccountId&quot;: &quot;${DebitAccountID}&quot;,&#xd;
&#xd;
&#xd;
&#xd;
        &quot;creditAccountId&quot;: &quot;${CreditAccountID}&quot;,&#xd;
&#xd;
&#xd;
&#xd;
        &quot;paymentOrderProductId&quot;: &quot;ACTRF&quot;,&#xd;
&#xd;
        &quot;apiChannel&quot;:&quot;HAMZA&quot;&#xd;
&#xd;
&#xd;
&#xd;
    }&#xd;
&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">10.10.90.40</stringProp>
            <stringProp name="HTTPSampler.port">9446</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/MDIDELIV/api/v1.0.0/order/createpaymentorder</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="companyId" elementType="Header">
                  <stringProp name="Header.name">companyId</stringProp>
                  <stringProp name="Header.value">EG0011001</stringProp>
                </elementProp>
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">7bf6b137-c8a4-4f99-8140-d47c282b7ace</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.31.1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
              <collectionProp name="AuthManager.auth_list">
                <elementProp name="" elementType="Authorization">
                  <stringProp name="Authorization.url">https://10.10.90.40:9446/MDIDELIV/api/v1.0.0/order/</stringProp>
                  <stringProp name="Authorization.username">AUTHOR</stringProp>
                  <stringProp name="Authorization.password">123456</stringProp>
                  <stringProp name="Authorization.domain"></stringProp>
                  <stringProp name="Authorization.realm"></stringProp>
                </elementProp>
              </collectionProp>
              <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
            </AuthManager>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="paymentOrder CSV Data Set Config" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">testData\\input\\core\\Core_TestData_CreatePaymentOrder.csv</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">amount,CustomerID,DebitAccountID,CreditAccountID</stringProp>
            </CSVDataSet>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Random amount" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1413853096">amount</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1609819592">
                  <stringProp name="1550223974">${__Random(1000,5000,)}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="TrasnID_PI" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">TrasnID_PI</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.header.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_Found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.header.status</stringProp>
              <stringProp name="EXPECTED_VALUE">success</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="If PaymentOderCreated_WriteOutputFile" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">//Default separator
char SEPARATOR = &apos;,&apos;;

String csvFile = props.get(&quot;coreOutputFolder&quot;)+vars.get(&quot;CsvPath_CreatePaymentOrder&quot;)

def params = [&quot;PaymentOrderPI_REF&quot;,vars.get(&quot;TrasnID_PI&quot;).toString(),&quot;&quot;,&quot;&quot;];

//function write line in csv
def writeLine(FileWriter writer, List&lt;String&gt; parameters, char separator) throws IOException {
    boolean firstParameter = true;
    StringBuilder stringBuilder = new StringBuilder();
    String parameter = &quot; &quot;;

    for (int i = 0; i &lt; parameters.size(); i++) {
        //get param
        parameter = parameters[i];
        log.info(parameter);

        //if the first param in the line, separator is not needed
        if (!firstParameter) {
            stringBuilder.append(separator);
        }

        //Add param to line
        stringBuilder.append(parameter);

        firstParameter = false;
    }

    //prepare file to next line
    stringBuilder.append(&quot;\n&quot;);

    //add to file the line
    log.info(stringBuilder.toString());
    writer.append(stringBuilder.toString());
}

FileWriter fileWriter = new FileWriter(csvFile, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="ThinkTime" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${ThinkTime}</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="+++ Deposits CreateCD +++ " enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="945458795">
            <stringProp name="1437690534">${Create_CD_Threads}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="-824956706">${Create_CD_RampUp}</stringProp>
            <stringProp name="-2048639888">${Create_CD_SteadyState}</stringProp>
            <stringProp name="1799376087">${Create_CD_Rampdown}</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TestPlan.comments">Check The Effective Date before execution</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="+++ Deposits CreateCD +++" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04_Core_API_DepositsCreateCD_/MDIDELIV/api/v1.0.0/holdings/deposits/termDeposits" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;header&quot;:{&#xd;
        &quot;override&quot;: {&#xd;
        &quot;overrideDetails&quot;: [&#xd;
            {&#xd;
                &quot;code&quot;: &quot;O-12443&quot;,&#xd;
                &quot;description&quot;: &quot;Entered value is lesser than minimum negotiation value of 5000 by 5000 in field AMOUNT.1.1&quot;,&#xd;
                &quot;id&quot;: &quot;AA.ECT.MIN.BELOW&quot;,&#xd;
                &quot;type&quot;: &quot;Override&quot;&#xd;
            },&#xd;
            {&#xd;
                &quot;code&quot;: &quot;O-10985&quot;,&#xd;
                &quot;description&quot;: &quot;Maturity Date is not a Working Day&quot;,&#xd;
                &quot;id&quot;: &quot;AA.MATURITY.DATE.NOT.WORKING.DAY&quot;,&#xd;
                &quot;type&quot;: &quot;Override&quot;&#xd;
            },&#xd;
            {&#xd;
                &quot;code&quot;: &quot;O-12005&quot;,&#xd;
                &quot;options&quot;: [&#xd;
                    &quot;RECEIVED&quot;,&#xd;
                    &quot;NOT RECEIVED&quot;&#xd;
                ],&#xd;
                &quot;description&quot;: &quot;Have you received Deposit Agreement/AAA*207 from 2000790}RECEIVED_NOT RECEIVED&quot;,&#xd;
                &quot;id&quot;: &quot;DM.CONFIRM.DOC&quot;,&#xd;
                &quot;type&quot;: &quot;Warning&quot;,&#xd;
                &quot;responseCode&quot;: &quot;RECEIVED&quot;&#xd;
            },&#xd;
            {&#xd;
                &quot;code&quot;: &quot;O-11236&quot;,&#xd;
                &quot;description&quot;: &quot;Settlement A/C ${payoutAccount1} does not belong to Arrangement Customer ${partyId}&quot;,&#xd;
                &quot;id&quot;: &quot;AA.SET.CUS.DIFF.FROM.ARR.CUS&quot;,&#xd;
                &quot;type&quot;: &quot;Override&quot;&#xd;
            },&#xd;
            {&#xd;
                &quot;code&quot;: &quot;O-11149&quot;,&#xd;
                &quot;description&quot;: &quot;Cancel arrangement date 20221025 is less than Today&apos;s date 20221207&quot;,&#xd;
                &quot;id&quot;: &quot;AA.CANCEL.ARR.DATE.LT.SYSTEM.DATE&quot;,&#xd;
                &quot;type&quot;: &quot;Override&quot;&#xd;
            }&#xd;
        ]&#xd;
    }&#xd;
    },&#xd;
	&quot;body&quot;: {&#xd;
        &quot;productId&quot;:&quot;${prodId}&quot;,&#xd;
        &quot;currency&quot;: &quot;${currency}&quot;,&#xd;
        &quot;arrangementEffectiveDate&quot;: &quot;${arrangementEffectiveDate}&quot;,&#xd;
        &quot;partyIds&quot;: [&#xd;
            {&#xd;
                &quot;partyId&quot;: &quot;${partyId}&quot;&#xd;
            }&#xd;
        ],&#xd;
        &quot;settlement&quot;: {&#xd;
            &quot;assocSettlement&quot;: [&#xd;
                {&#xd;
                    &quot;reference&quot;: [&#xd;
                        {&#xd;
                            &quot;payinAccount&quot;: &quot;${payInAccount}&quot;&#xd;
                        }&#xd;
                    ]&#xd;
                }&#xd;
            ],&#xd;
            &quot;payout&quot;: [&#xd;
                {&#xd;
                    &quot;property&quot;: [&#xd;
                        {&#xd;
                            &quot;payoutAccount&quot;: &quot;${payoutAccount1}&quot;&#xd;
                        }&#xd;
                    ]&#xd;
                },&#xd;
                {&#xd;
                    &quot;property&quot;: [&#xd;
                        {&#xd;
                            &quot;payoutAccount&quot;: &quot;${payoutAccount2}&quot;&#xd;
                        }&#xd;
                    ]&#xd;
                }&#xd;
            ]&#xd;
        },&#xd;
        &quot;commitment&quot;: {&#xd;
            &quot;amount&quot;: &quot;${amout}&quot;,&#xd;
            &quot;term&quot;: &quot;${term}&quot;&#xd;
      &#xd;
        },&#xd;
        &quot;schedule&quot;: {&#xd;
            &quot;payment&quot;: [&#xd;
            {&#xd;
                &quot;paymentMethod&quot;: &quot;${paymentMethod}&quot;&#xd;
        }&#xd;
      ]&#xd;
    }      &#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">10.10.90.40</stringProp>
            <stringProp name="HTTPSampler.port">9446</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/MDIDELIV/api/v1.0.0/holdings/deposits/termDeposits</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="companyId" elementType="Header">
                  <stringProp name="Header.name">companyId</stringProp>
                  <stringProp name="Header.value">EG0011001</stringProp>
                </elementProp>
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">3dd1779f-65e7-4282-8574-8c53654ee922</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.31.1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
              <collectionProp name="AuthManager.auth_list">
                <elementProp name="" elementType="Authorization">
                  <stringProp name="Authorization.url">https://10.10.90.40:9446/MDIDELIV/api/v1.0.0/holdings/deposits/</stringProp>
                  <stringProp name="Authorization.username">INPUTT</stringProp>
                  <stringProp name="Authorization.password">123456</stringProp>
                  <stringProp name="Authorization.domain"></stringProp>
                  <stringProp name="Authorization.realm"></stringProp>
                </elementProp>
              </collectionProp>
              <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
            </AuthManager>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CreateCD CSV Data Set Config" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">testData\\input\\core\\Core_TestData_CreateCD.csv</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">prodId,currency,arrangementEffectiveDate,partyId,payInAccount,payoutAccount1,payoutAccount2,amout,term,paymentMethod</stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="arrangementId JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">arrangementId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.body..arrangmentId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">//Default separator
char SEPARATOR = &apos;,&apos;;


String csvFile = &quot;&quot;+vars.get(&quot;CsvPath_CreateCD&quot;)


def params = [&quot;Arrangement ID&quot;,vars.get(&quot;arrangementId&quot;).toString(),&quot;&quot;,&quot;&quot;];

//function write line in csv
def writeLine(FileWriter writer, List&lt;String&gt; parameters, char separator) throws IOException {
    boolean firstParameter = true;
    StringBuilder stringBuilder = new StringBuilder();
    String parameter = &quot; &quot;;

    for (int i = 0; i &lt; parameters.size(); i++) {
        //get param
        parameter = parameters[i];
        log.info(parameter);

        //if the first param in the line, separator is not needed
        if (!firstParameter) {
            stringBuilder.append(separator);
        }

        //Add param to line
        stringBuilder.append(parameter);

        firstParameter = false;
    }

    //prepare file to next line
    stringBuilder.append(&quot;\n&quot;);

    //add to file the line
    log.info(stringBuilder.toString());
    writer.append(stringBuilder.toString());
}

FileWriter fileWriter = new FileWriter(csvFile, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.header.status</stringProp>
              <stringProp name="EXPECTED_VALUE">success</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="If CDCreated_WriteOutputFile" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">//Default separator
char SEPARATOR = &apos;,&apos;;

String csvFile = props.get(&quot;coreOutputFolder&quot;)+vars.get(&quot;CsvPath_CreateCD&quot;);

def params = [&quot;Arrangement ID&quot;,vars.get(&quot;arrangementId&quot;).toString(),&quot;&quot;,&quot;&quot;];

//function write line in csv
def writeLine(FileWriter writer, List&lt;String&gt; parameters, char separator) throws IOException {
    boolean firstParameter = true;
    StringBuilder stringBuilder = new StringBuilder();
    String parameter = &quot; &quot;;

    for (int i = 0; i &lt; parameters.size(); i++) {
        //get param
        parameter = parameters[i];
        log.info(parameter);

        //if the first param in the line, separator is not needed
        if (!firstParameter) {
            stringBuilder.append(separator);
        }

        //Add param to line
        stringBuilder.append(parameter);

        firstParameter = false;
    }

    //prepare file to next line
    stringBuilder.append(&quot;\n&quot;);

    //add to file the line
    log.info(stringBuilder.toString());
    writer.append(stringBuilder.toString());
}

FileWriter fileWriter = new FileWriter(csvFile, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="ThinkTime" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${ThinkTime}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="+++ Create ACH Payment +++" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-827521150">
            <stringProp name="1674760480">${CreateACHPayment_Threads}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="-401667292">${CreateACHPayment_RampUp}</stringProp>
            <stringProp name="1067046378">${CreateACHPayment_SteadyState}</stringProp>
            <stringProp name="558609821">${CreateACHPayment_Rampdown}</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="+++Create ACH Payment+++" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="05_Core_API_CreateACHPayment_/MDICORE/api/v2.2.0/order/paymentOrders" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&#xd;
    &quot;body&quot;:&#xd;
    {&#xd;
        &quot;amount&quot;: ${amount},&#xd;
        &quot;orderingCustomerId&quot;: &quot;${orderingCustomerId}&quot;,&#xd;
        &quot;debitAccountId&quot;: &quot;${debitAccountId}&quot;,&#xd;
        &quot;beneficiaryAccountId&quot;: &quot;${beneficiaryAccountId}&quot;,&#xd;
        &quot;beneficiaryBIC&quot;: &quot;${beneficiaryBIC}&quot;,&#xd;
        &quot;beneficiaryName&quot;: &quot;${beneficiaryName}&quot;,&#xd;
        &quot;paymentCategory&quot; : &quot;${paymentCategory}&quot;,&#xd;
        &quot;paymentCurrencyId&quot;:&quot;${paymentCurrencyId}&quot;,&#xd;
        &quot;paymentOrderProductId&quot;: &quot;EGACHCT&quot;,&#xd;
        &quot;apiChannel&quot;:&quot;HAMZA&quot;&#xd;
    }&#xd;
&#xd;
&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">10.10.90.40</stringProp>
            <stringProp name="HTTPSampler.port">9446</stringProp>
            <stringProp name="HTTPSampler.protocol">HTTPS</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/MDICORE/api/v2.2.0/order/paymentOrders</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">&lt;calculated when request is sent&gt;</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">&lt;calculated when request is sent&gt;</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
              <collectionProp name="AuthManager.auth_list">
                <elementProp name="" elementType="Authorization">
                  <stringProp name="Authorization.url">https://10.10.90.40:9446/MDICORE/api/v2.2.0/order/paymentOrders</stringProp>
                  <stringProp name="Authorization.username">INPUTT</stringProp>
                  <stringProp name="Authorization.password">12345</stringProp>
                  <stringProp name="Authorization.domain"></stringProp>
                  <stringProp name="Authorization.realm"></stringProp>
                </elementProp>
              </collectionProp>
              <boolProp name="AuthManager.clearEachIteration">true</boolProp>
              <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
            </AuthManager>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CreateACHPayment Data Set Config" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">testData\\input\\core\\Core_TestData_CreateACHPayment.csv</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.thread</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">amount,orderingCustomerId,debitAccountId,beneficiaryAccountId,beneficiaryBIC,beneficiaryName,paymentCategory,paymentCurrencyId</stringProp>
            </CSVDataSet>
            <hashTree/>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Random amount" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1413853096">amount</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1609819592">
                  <stringProp name="1550223974">${__Random(1000,5000,)}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ACH_PI_REF Json Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ACH_PI_REF</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.header.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.header.status</stringProp>
              <stringProp name="EXPECTED_VALUE">success</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">//Default separator
char SEPARATOR = &apos;,&apos;;

String csvFile = props.get(&quot;coreOutputFolder&quot;)+vars.get(&quot;CsvPath_CreateACHPayment&quot;);


def params = [&quot;ID&quot;,vars.get(&quot;ACH Payment&quot;).toString(),vars.get(&quot;ACH_PI_REF&quot;).toString(),&quot;&quot;,&quot;&quot;];

//function write line in csv
def writeLine(FileWriter writer, List&lt;String&gt; parameters, char separator) throws IOException {
    boolean firstParameter = true;
    StringBuilder stringBuilder = new StringBuilder();
    String parameter = &quot; &quot;;

    for (int i = 0; i &lt; parameters.size(); i++) {
        //get param
        parameter = parameters[i];
        log.info(parameter);

        //if the first param in the line, separator is not needed
        if (!firstParameter) {
            stringBuilder.append(separator);
        }

        //Add param to line
        stringBuilder.append(parameter);

        firstParameter = false;
    }

    //prepare file to next line
    stringBuilder.append(&quot;\n&quot;);

    //add to file the line
    log.info(stringBuilder.toString());
    writer.append(stringBuilder.toString());
}

FileWriter fileWriter = new FileWriter(csvFile, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="ThinkTime" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${ThinkTime}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="+++ Get Account Balance +++" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-1626695192">
            <stringProp name="-730262256">${Get_AcoountBalance_Threads}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="-2003269324">${Get_AcoountBalance_RampUp}</stringProp>
            <stringProp name="-1432575526">${Get_AcoountBalance_SteadyState}</stringProp>
            <stringProp name="-1012203635">${Get_AcoountBalance_RampDown}</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="+++Get Account Balance+++" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="06_Core_API_GetAccountBalance_/MDICORE/api/v4.1.0/holdings/accounts/balances" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="accountId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">accountId</stringProp>
                  <stringProp name="Argument.value">${accountId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">10.10.90.40</stringProp>
            <stringProp name="HTTPSampler.port">9446</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/MDICORE/api/v4.1.0/holdings/accounts/balances</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="companyId" elementType="Header">
                  <stringProp name="Header.name">companyId</stringProp>
                  <stringProp name="Header.value">EG0011001</stringProp>
                </elementProp>
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">50658e2d-ecaa-41a7-be3f-918eedd81c55</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.31.1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
              <collectionProp name="AuthManager.auth_list">
                <elementProp name="" elementType="Authorization">
                  <stringProp name="Authorization.url">https://10.10.90.40:9446/MDICORE/api/v4.1.0/holdings/accounts/</stringProp>
                  <stringProp name="Authorization.username">INPUTT</stringProp>
                  <stringProp name="Authorization.password">123456</stringProp>
                  <stringProp name="Authorization.domain"></stringProp>
                  <stringProp name="Authorization.realm"></stringProp>
                </elementProp>
              </collectionProp>
              <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
            </AuthManager>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="GetAccountBalance Data Set Config" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">testData\\input\\core\\Core_TestData_GetAccountDetails.csv</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">accountId</stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="status" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">status</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.header.status</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Failed</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="useableBalance" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">useableBalance</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.body[0].useableBalance</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.header.status</stringProp>
              <stringProp name="EXPECTED_VALUE">success</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">//Default separator
char SEPARATOR = &apos;,&apos;;

String csvFile = props.get(&quot;coreOutputFolder&quot;)+vars.get(&quot;CSV_GetAccount_Details&quot;)


def params = [vars.get(&quot;accountId&quot;).toString(),vars.get(&quot;status&quot;).toString()];

//function write line in csv
def writeLine(FileWriter writer, List&lt;String&gt; parameters, char separator) throws IOException {
    boolean firstParameter = true;
    StringBuilder stringBuilder = new StringBuilder();
    String parameter = &quot; &quot;;

    for (int i = 0; i &lt; parameters.size(); i++) {
        //get param
        parameter = parameters[i];
        log.info(parameter);

        //if the first param in the line, separator is not needed
        if (!firstParameter) {
            stringBuilder.append(separator);
        }

        //Add param to line
        stringBuilder.append(parameter);

        firstParameter = false;
    }

    //prepare file to next line
    stringBuilder.append(&quot;\n&quot;);

    //add to file the line
    log.info(stringBuilder.toString());
    writer.append(stringBuilder.toString());
}

FileWriter fileWriter = new FileWriter(csvFile, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="ThinkTime" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${ThinkTime}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="+++ New Debit Card Creation +++" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-175999326">
            <stringProp name="-2026473190">${IssuanceOfCard_Threads}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="33127402">${IssuanceOfCard_RampUp}</stringProp>
            <stringProp name="949285092">${IssuanceOfCard_SteadyState}</stringProp>
            <stringProp name="1754930371">${IssuanceOfCard_RampDown}</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="+++ New Debit Card Creation +++" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="07_Core_API_NewDebitCardCreation_/cortex-core-ws-rest/issuance/IssuerDirectives" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;RequestHeader&quot;: {&#xd;
    &quot;Version&quot;: &quot;1.0.0&quot;,&#xd;
    &quot;MsgUid&quot;: &quot;ccd31e0b-3355-431f-90f8-a90bc47191a5&quot;,&#xd;
    &quot;Source&quot;: &quot;Mobile&quot;,&#xd;
    &quot;ServiceId&quot;: &quot;Issuance&quot;,&#xd;
    &quot;ReqDateTime&quot;: &quot;2021-09-16T15:17:59.780Z&quot;&#xd;
  },&#xd;
  &quot;IssuerDirectivesRequestDetails&quot;: {&#xd;
    &quot;Action&quot;: &quot;1&quot;, &#xd;
    &quot;InstitutionCode&quot;: &quot;MDI&quot;, &#xd;
    &quot;BatchClass&quot;: 4, &#xd;
    &quot;User&quot;: &quot;TEST&quot;, &#xd;
    &quot;SkipFee&quot;: false, &#xd;
    &quot;CustomerDetailsData&quot;: {&#xd;
      &quot;AllowDuplicate&quot;: true, &#xd;
      &quot;CustomerCode&quot;: &quot;123456789&quot;,&#xd;
      &quot;Title&quot;: &quot;MS&quot;, &#xd;
      &quot;FirstName&quot;: &quot;TEST FIRST&quot;, &#xd;
      &quot;LastName&quot;: &quot;TEST LAST&quot;,&#xd;
      &quot;_COMMENT1_&quot;: &quot;Enter CIF for IdNumber&quot;,&#xd;
      &quot;IdNumber&quot;: &quot;${IdNumber}&quot;,  &#xd;
      &quot;NationalId&quot;: &quot;${NationalId}&quot;, &#xd;
	  &quot;DateOfBirth&quot;: &quot;${DateOfBirth}&quot;, &#xd;
      &quot;MaritalStatus&quot;: &quot;M&quot;,  &#xd;
      &quot;Gender&quot;: &quot;${Gender}&quot;, &#xd;
      &quot;PreferredLanguage&quot;: &quot;EN&quot;, &#xd;
      &quot;CustomerType&quot;: 0, &#xd;
      &quot;ProfessionCode&quot;: 0,&#xd;
      &quot;CustomerSegment&quot;: &quot;DEFAULT/NONE&quot;, &#xd;
      &quot;_COMMENT2_&quot;: &quot;Enter CIF for IdNumber&quot;,&#xd;
      &quot;ExternalCustomerCode&quot;: &quot;123456789&quot;, &#xd;
      &quot;CustomerAddressList&quot;: [&#xd;
        {&#xd;
          &quot;AddressLine1&quot;: &quot;TEST ADDRESS 1&quot;,&#xd;
          &quot;AddressLine2&quot;: &quot;TEST ADDRESS 2&quot;, &#xd;
          &quot;AddressLine3&quot;: &quot;TEST ADDRESS 3&quot;,&#xd;
          &quot;AddressLine4&quot;: &quot;TEST ADDRESS 4&quot;,&#xd;
          &quot;AddressLine5&quot;: &quot;TEST ADDRESS 5&quot;,&#xd;
          &quot;City&quot;: &quot;NEW YORK&quot;, &#xd;
          &quot;Country&quot;: &quot;818&quot;, &#xd;
          &quot;AddressRole&quot;: 0 &#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;AccountDetailsList&quot;: [&#xd;
      {&#xd;
        &quot;AllowDuplicate&quot;: true, &#xd;
        &quot;AccountNumber&quot;: &quot;${AccountNumber}&quot;, &#xd;
        &quot;AccountCurrency&quot;: {&#xd;
          &quot;CurrCode&quot;: &quot;818&quot; &#xd;
        },&#xd;
        &quot;_COMMENT3_&quot;: &quot;For Debit Card, AccountType is 00&quot;,&#xd;
        &quot;AccountType&quot;: &quot;00&quot;, &#xd;
        &quot;BranchCode&quot;: &quot;000&quot;, &#xd;
        &quot;AccountStatus&quot;: &quot;00&quot;, &#xd;
        &quot;VipFlag&quot;: &quot;0&quot;, &#xd;
        &quot;IsDefault&quot;: true, &#xd;
        &quot;CreditLimit&quot;: 0&#xd;
      }&#xd;
    ],&#xd;
    &quot;CardDetailsData&quot;: { &#xd;
      &quot;Title&quot;: &quot;MR&quot;,&#xd;
      &quot;FirstName&quot;: &quot;TEST FIRST&quot;,&#xd;
      &quot;LastName&quot;: &quot;TEST LAST&quot;,&#xd;
&#xd;
      &quot;LocalizedFirstName&quot;: &quot;نمشيست&quot;,&#xd;
      &quot;LocalizedLastName&quot;: &quot;شميستب&quot;,&#xd;
      &quot;EmbossingName&quot;: &quot;FirstName + space + LastName&quot;,&#xd;
      &quot;Secondary&quot;: false, &#xd;
      &quot;DeliveryMethod&quot;: &quot;C&quot;,&#xd;
      &quot;BranchCode&quot;: &quot;000&quot;,&#xd;
      &quot;DeliveryBranchCode&quot;: &quot;000&quot;,&#xd;
      &quot;Priority&quot;: 0, &#xd;
      &quot;DateOfBirth&quot;: &quot;1988-09-16&quot;,&#xd;
      &quot;CardProduct&quot;: &quot;1000&quot;, &#xd;
      &quot;Language&quot;: 1, &#xd;
      &quot;_COMMENT4_&quot;: &quot;Enter CIF for IdNumber&quot;,&#xd;
      &quot;CustomerIdNumber&quot;: &quot;${IdNumber}&quot;, &#xd;
      &quot;_COMMENT5_&quot;: &quot;Enter CIF for IdNumber&quot;,&#xd;
      &quot;ExtendedCustomerIdNumber&quot;: &quot;${IdNumber}&quot;, &#xd;
      &quot;CommissionCategory&quot;: &quot;DEFAULT/NONE&quot;, &#xd;
      &quot;FeeCategory&quot;: &quot;DEFAULT/NONE&quot;, &#xd;
      &quot;CyclicFeeCategory&quot;: &quot;DEFAULT/NONE&quot;, &#xd;
      &quot;IssuerRiskCategory&quot;: &quot;DEFAULT/NONE&quot;, &#xd;
      &quot;IssuanceCategory&quot;: &quot;0&quot;, &#xd;
      &quot;GeneratePinMailer&quot;: false,&#xd;
      &quot;_COMMENT6_&quot;: &quot;Put this value at OnBoarding&quot;,&#xd;
      &quot;Memo&quot;: &quot;NEW Default CARD CREATION&quot;,&#xd;
&#xd;
                    &quot;CardAuthorizationParameters&quot;: [&#xd;
                        {&#xd;
                            &quot;Position&quot;: 2,&#xd;
                            &quot;Value&quot;: &quot;0&quot;&#xd;
                        }&#xd;
                    ], &#xd;
      &#xd;
	  &quot;CardAddressList&quot;: [ &#xd;
        {&#xd;
          &quot;AddressLine1&quot;: &quot;TEST ADDRESS 1&quot;,&#xd;
          &quot;AddressLine2&quot;: &quot;TEST ADDRESS 2&quot;, &#xd;
          &quot;AddressLine3&quot;: &quot;TEST ADDRESS 3&quot;,&#xd;
          &quot;AddressLine4&quot;: &quot;TEST ADDRESS 4&quot;,&#xd;
          &quot;AddressLine5&quot;: &quot;TEST ADDRESS 5&quot;,&#xd;
          &quot;City&quot;: &quot;NEW YORK&quot;, &#xd;
          &quot;Country&quot;: &quot;818&quot;, &#xd;
          &quot;AddressRole&quot;: 0 &#xd;
        }&#xd;
      ]&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">10.10.90.70</stringProp>
            <stringProp name="HTTPSampler.port">9443</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/cortex-core-ws-rest/issuance/IssuerDirectives</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments"> &quot;DateOfBirth&quot;: &quot;1988-09-16&quot;</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">62169461-89c9-4c71-aa08-d734aa8bb0b7</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.31.1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="NewDebitCardCreation Data Set Config" enabled="true">
              <stringProp name="filename">testData\\input\\core\\Core_TestData_NewDebitCardCreation.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames">IdNumber,NationalId,DateOfBirth,Gender,AccountNumber</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.thread</stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="CardNumber" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">CardNumber</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..VPan</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$..VPan</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">//Default separator
char SEPARATOR = &apos;,&apos;;

String csvFile = props.get(&quot;coreOutputFolder&quot;)+vars.get(&quot;CsvPath_CardNumber&quot;);

def params = [&quot;Card Number&quot;,vars.get(&quot;CardNumber&quot;).toString(),&quot;&quot;,&quot;&quot;];

//function write line in csv
def writeLine(FileWriter writer, List&lt;String&gt; parameters, char separator) throws IOException {
    boolean firstParameter = true;
    StringBuilder stringBuilder = new StringBuilder();
    String parameter = &quot; &quot;;

    for (int i = 0; i &lt; parameters.size(); i++) {
        //get param
        parameter = parameters[i];
        log.info(parameter);

        //if the first param in the line, separator is not needed
        if (!firstParameter) {
            stringBuilder.append(separator);
        }

        //Add param to line
        stringBuilder.append(parameter);

        firstParameter = false;
    }

    //prepare file to next line
    stringBuilder.append(&quot;\n&quot;);

    //add to file the line
    log.info(stringBuilder.toString());
    writer.append(stringBuilder.toString());
}

FileWriter fileWriter = new FileWriter(csvFile, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="ThinkTime" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${ThinkTime}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="+++ Update Customer Posting Restriction +++" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-2093799608">
            <stringProp name="1178439788">${Update_CustomerPostingRestriction_Threads}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="552153688">${Update_CustomerPostingRestriction_RampUp}</stringProp>
            <stringProp name="1690046262">${Update_CustomerPostingRestriction_SteadyState}</stringProp>
            <stringProp name="-1942429743">${Update_CustomerPostingRestriction_Rampdown}</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Update Account Posting Restriction - Input  Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">D:/MDI/Jmeter files/updatePostingRestrictionCustomer/Input.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">customerId,postingRestriction</stringProp>
        </CSVDataSet>
        <hashTree/>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://10.10.90.40:9446/MDIDELIV/api/v1.0.0/party/customers/onboarding/customer/</stringProp>
              <stringProp name="Authorization.username">INPUTT</stringProp>
              <stringProp name="Authorization.password">123456</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
          </collectionProp>
          <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
        </AuthManager>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="+++ Get Customer Posting Restriction +++" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Customer Posting Restriction" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;body&quot;:{&#xd;
    &#xd;
        &quot;postingRestrictIds&quot;: [&#xd;
            {&#xd;
                &quot;postingRestrictId&quot;: &quot;${postingRestriction}&quot;&#xd;
            }&#xd;
        ]&#xd;
}   &#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">10.10.90.40</stringProp>
            <stringProp name="HTTPSampler.port">9446</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/MDIDELIV/api/v1.0.0/party/customers/onboarding/customer/${customerId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="companyId" elementType="Header">
                  <stringProp name="Header.name">companyId</stringProp>
                  <stringProp name="Header.value">EG0011001</stringProp>
                </elementProp>
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">652587b6-b7e2-4ee2-803b-b22b4ac24cf7</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.31.1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="status" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">status</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.header.status</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Failed</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">//Default separator
char SEPARATOR = &apos;,&apos;;


String csvFile = props.get(&quot;coreOutputFolder&quot;)+vars.get(&quot;CsvPath_UpdateCustomerPostingRestraction&quot;)


def params = [vars.get(&quot;customerId&quot;).toString(),vars.get(&quot;status&quot;).toString()];

//function write line in csv
def writeLine(FileWriter writer, List&lt;String&gt; parameters, char separator) throws IOException {
    boolean firstParameter = true;
    StringBuilder stringBuilder = new StringBuilder();
    String parameter = &quot; &quot;;

    for (int i = 0; i &lt; parameters.size(); i++) {
        //get param
        parameter = parameters[i];
        log.info(parameter);

        //if the first param in the line, separator is not needed
        if (!firstParameter) {
            stringBuilder.append(separator);
        }

        //Add param to line
        stringBuilder.append(parameter);

        firstParameter = false;
    }

    //prepare file to next line
    stringBuilder.append(&quot;\n&quot;);

    //add to file the line
    log.info(stringBuilder.toString());
    writer.append(stringBuilder.toString());
}

FileWriter fileWriter = new FileWriter(csvFile, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.header.status</stringProp>
              <stringProp name="EXPECTED_VALUE">success</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="+++ Get Customer Posting Restriction +++" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="1810985246">
            <stringProp name="-869789364">${GetCustomerPostingRestriction_Threads}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="624629112">${GetCustomerPostingRestriction_RampUp}</stringProp>
            <stringProp name="-38068202">${GetCustomerPostingRestriction_SteadyState}</stringProp>
            <stringProp name="-1042576687">${GetCustomerPostingRestriction_RampDown}</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Get Customer Posting Restriction - Input CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">D:/MDI/Jmeter files/getCustomerPostingRestriction/Input.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">customerId</stringProp>
        </CSVDataSet>
        <hashTree/>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://10.10.90.40:9446/MDICORE/api/v4.0.0/party/customers/</stringProp>
              <stringProp name="Authorization.username">INPUTT</stringProp>
              <stringProp name="Authorization.password">123456</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
          </collectionProp>
          <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
        </AuthManager>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="+++ Get Customer Posting Restriction +++" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Customer Posting Restriction" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="customerId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">customerId</stringProp>
                  <stringProp name="Argument.value">${customerId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">10.10.90.40</stringProp>
            <stringProp name="HTTPSampler.port">9446</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/MDICORE/api/v4.0.0/party/customers/postingRestrictions</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="companyId" elementType="Header">
                  <stringProp name="Header.name">companyId</stringProp>
                  <stringProp name="Header.value">EG0011001</stringProp>
                </elementProp>
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">7ca297b8-6c4a-43be-af85-8656c848f4c4</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.31.1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="status" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">status</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.header.status</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Failed</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="postingRestrictDisplayName" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">postingRestrictDisplayName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.body[0].postingRestricts[0].postingRestrictDisplayName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="postingRestrictId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">postingRestrictId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.body[0].postingRestricts[0].postingRestrictId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.header.status</stringProp>
              <stringProp name="EXPECTED_VALUE">success</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">//Default separator
char SEPARATOR = &apos;,&apos;;


String csvFile = props.get(&quot;coreOutputFolder&quot;)+vars.get(&quot;CsvPath_GetCustomerPostingRestriction&quot;)


def params = [vars.get(&quot;customerId&quot;).toString(),vars.get(&quot;status&quot;).toString(),vars.get(&quot;postingRestrictDisplayName&quot;).toString(),vars.get(&quot;postingRestrictId&quot;).toString()];

//function write line in csv
def writeLine(FileWriter writer, List&lt;String&gt; parameters, char separator) throws IOException {
    boolean firstParameter = true;
    StringBuilder stringBuilder = new StringBuilder();
    String parameter = &quot; &quot;;

    for (int i = 0; i &lt; parameters.size(); i++) {
        //get param
        parameter = parameters[i];
        log.info(parameter);

        //if the first param in the line, separator is not needed
        if (!firstParameter) {
            stringBuilder.append(separator);
        }

        //Add param to line
        stringBuilder.append(parameter);

        firstParameter = false;
    }

    //prepare file to next line
    stringBuilder.append(&quot;\n&quot;);

    //add to file the line
    log.info(stringBuilder.toString());
    writer.append(stringBuilder.toString());
}

FileWriter fileWriter = new FileWriter(csvFile, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="+++ Get KYC +++" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-2114595297">
            <stringProp name="697193213">${GetKYC_Threads}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="-1541580377">${GetKYC_RampUp}</stringProp>
            <stringProp name="-707321529">${GetKYC_SteadyState}</stringProp>
            <stringProp name="289242944">${GetKYC_RampDown}</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://10.10.90.40:9446/MDICORE/api/v4.0.0/party/customers/</stringProp>
              <stringProp name="Authorization.username">INPUTT</stringProp>
              <stringProp name="Authorization.password">123456</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://10.10.90.40:9446/MDICORE/api/v4.1.0/holdings/accounts/</stringProp>
              <stringProp name="Authorization.username">INPUTT</stringProp>
              <stringProp name="Authorization.password">123456</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://10.10.90.40:9446/MDICORE/api/v2.0.0/holdings/deposits/</stringProp>
              <stringProp name="Authorization.username">INPUTT</stringProp>
              <stringProp name="Authorization.password">123456</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://10.10.90.40:9446/MDIDELIV/api/v1.0.0/holdings/create/</stringProp>
              <stringProp name="Authorization.username">INPUTT</stringProp>
              <stringProp name="Authorization.password">123456</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
          </collectionProp>
          <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
        </AuthManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">D:/MDI Performance/CIF perferomance.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">CIF</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Postman-Token" elementType="Header">
              <stringProp name="Header.name">Postman-Token</stringProp>
              <stringProp name="Header.value">6819cdb9-6fe2-45e6-bd94-05a7d866074d</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">PostmanRuntime/7.31.0</stringProp>
            </elementProp>
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">*/*</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="+++ Get KYC +++" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="+++ Get KYC +++" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">10.10.90.40</stringProp>
            <stringProp name="HTTPSampler.port">9446</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/MDICORE/api/v4.0.0/party/customers/${CIF}/KYC</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.header.status</stringProp>
              <stringProp name="EXPECTED_VALUE">success</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="+++ Update Account Posting Restriction +++" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="2134117041">
            <stringProp name="-650037828">${UpdateAccountPostingRestriction_Threads}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="1463001864">${UpdateAccountPostingRestriction_RampUp}</stringProp>
            <stringProp name="-674460538">${UpdateAccountPostingRestriction_SteadyState}</stringProp>
            <stringProp name="1474753633">${UpdateAccountPostingRestriction_RampDown}</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Update Account Posting Restriction - Input CSV Data Set Config" enabled="true">
          <stringProp name="filename">D:\MDI\Jmeter files\updatePostingRestrictionAccount_API\Input.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">customerID,startDate,effectiveDate,postingRestriction</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://10.10.90.40:9446/MDICORE/api/v4.0.0/party/customers/</stringProp>
              <stringProp name="Authorization.username">INPUTT</stringProp>
              <stringProp name="Authorization.password">123456</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
          </collectionProp>
          <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
        </AuthManager>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="+++ Update Account Posting Restriction +++" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Account Posting Restriction" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;header&quot;: {&#xd;
    &quot;override&quot;: {&#xd;
      &quot;overrideDetails&quot;: [&#xd;
      ]&#xd;
    }&#xd;
  },&#xd;
  &quot;body&quot;: {&#xd;
    &quot;customerIds&quot;: [&#xd;
      {&#xd;
        &quot;customerId&quot;: &quot;${customerID}&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;productId&quot;: &quot;MDI.CURRENT.DEFAULT&quot;,&#xd;
    &quot;effectiveDate&quot;: &quot;${effectiveDate}&quot;,&#xd;
    &quot;balance&quot;: {&#xd;
      &quot;postingRestriction&quot;: &quot;${postingRestriction}&quot;,&#xd;
      &quot;startDate&quot;: &quot;${startDate}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">10.10.90.40</stringProp>
            <stringProp name="HTTPSampler.port">9446</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/MDIDELIV/api/v1.0.0/product/updatePosting/100000071344</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">7225108e-1de7-43f7-813b-4927354ec642</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.31.1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="status" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">status</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.header.status</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="customerId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">customerId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.body..customerId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">FAILED</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.header.status</stringProp>
              <stringProp name="EXPECTED_VALUE">success</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">//Default separator
char SEPARATOR = &apos;,&apos;;


String csvFile = props.get(&quot;coreOutputFolder&quot;)+vars.get(&quot;CsvPath_UpdateAccountPostingRestriction&quot;)


def params = [&quot;CustomerId&quot;,vars.get(&quot;customerID&quot;).toString(),vars.get(&quot;status&quot;).toString(),&quot;&quot;,&quot;&quot;];

//function write line in csv
def writeLine(FileWriter writer, List&lt;String&gt; parameters, char separator) throws IOException {
    boolean firstParameter = true;
    StringBuilder stringBuilder = new StringBuilder();
    String parameter = &quot; &quot;;

    for (int i = 0; i &lt; parameters.size(); i++) {
        //get param
        parameter = parameters[i];
        log.info(parameter);

        //if the first param in the line, separator is not needed
        if (!firstParameter) {
            stringBuilder.append(separator);
        }

        //Add param to line
        stringBuilder.append(parameter);

        firstParameter = false;
    }

    //prepare file to next line
    stringBuilder.append(&quot;\n&quot;);

    //add to file the line
    log.info(stringBuilder.toString());
    writer.append(stringBuilder.toString());
}

FileWriter fileWriter = new FileWriter(csvFile, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="+++ Get Account Posting Restriction +++" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="1926663811">
            <stringProp name="-1690945413">${GetAccountPostingRestriction_Threads}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="-1757164439">${GetAccountPostingRestriction_RampUp}</stringProp>
            <stringProp name="-1108076603">${GetAccountPostingRestriction_SteadyState}</stringProp>
            <stringProp name="-728610430">${GetAccountPostingRestriction_RampDown}</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Get Account Posting Restriction - Input CSV Data Set Config" enabled="true">
          <stringProp name="TestPlan.comments">The Threads will stop at EOF</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">D:/MDI/Jmeter files/getAccountPostingRestrictions/Input.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">accountId</stringProp>
        </CSVDataSet>
        <hashTree/>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://10.10.90.40:9446/MDIDELIV/api/v1.0.0/holdings/account/</stringProp>
              <stringProp name="Authorization.username">INPUTT</stringProp>
              <stringProp name="Authorization.password">123456</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
          </collectionProp>
          <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
        </AuthManager>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="+++ Get Account Posting Restriction +++" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="+++ Get Account Posting Restriction +++" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="accountId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">accountId</stringProp>
                  <stringProp name="Argument.value">${accountId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">10.10.90.40</stringProp>
            <stringProp name="HTTPSampler.port">9446</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/MDIDELIV/api/v1.0.0/holdings/account/postingrestriction</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">138f1788-077e-402d-afba-7762a91ece38</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.31.1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.header.status</stringProp>
              <stringProp name="EXPECTED_VALUE">success</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">//Default separator
char SEPARATOR = &apos;,&apos;;


String csvFile = props.get(&quot;coreOutputFolder&quot;)+vars.get(&quot;CsvPath_GetAccountPostingRestriction&quot;)


def params = [vars.get(&quot;accountId&quot;).toString(),vars.get(&quot;status&quot;).toString()];

//function write line in csv
def writeLine(FileWriter writer, List&lt;String&gt; parameters, char separator) throws IOException {
    boolean firstParameter = true;
    StringBuilder stringBuilder = new StringBuilder();
    String parameter = &quot; &quot;;

    for (int i = 0; i &lt; parameters.size(); i++) {
        //get param
        parameter = parameters[i];
        log.info(parameter);

        //if the first param in the line, separator is not needed
        if (!firstParameter) {
            stringBuilder.append(separator);
        }

        //Add param to line
        stringBuilder.append(parameter);

        firstParameter = false;
    }

    //prepare file to next line
    stringBuilder.append(&quot;\n&quot;);

    //add to file the line
    log.info(stringBuilder.toString());
    writer.append(stringBuilder.toString());
}

FileWriter fileWriter = new FileWriter(csvFile, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="status" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">status</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.header.status</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Failed</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="+++ Get Account Summary +++" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="1261436815">
            <stringProp name="1816647899">${GetAccountSummary_Threads}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="-951279607">${GetAccountSummary_RampUp}</stringProp>
            <stringProp name="1920895013">${GetAccountSummary_SteadyState}</stringProp>
            <stringProp name="632599842">${GetAccountSummary_RampDown}</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Get Account Summary - Input CSV Data Set Config" enabled="true">
          <stringProp name="TestPlan.comments">The Threads will stop at the EOF</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">D:/MDI/Jmeter files/getAccountSummary/Input.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">accountNo</stringProp>
        </CSVDataSet>
        <hashTree/>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://10.10.90.40:9446/MDICORE/api/v3.0.0/holdings/arrangements/100000000064/</stringProp>
              <stringProp name="Authorization.username">INPUTT</stringProp>
              <stringProp name="Authorization.password">123456</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
          </collectionProp>
          <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
        </AuthManager>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="+++ Get Account Summary +++" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="+++ Get Account Summary +++" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">10.10.90.40</stringProp>
            <stringProp name="HTTPSampler.port">9446</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/MDICORE/api/v3.0.0/holdings/arrangements/100000000064/transactions</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="companyId" elementType="Header">
                  <stringProp name="Header.name">companyId</stringProp>
                  <stringProp name="Header.value">EG0011001</stringProp>
                </elementProp>
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">d07fa8d0-c1d6-4f72-b460-103986a4a86a</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.31.1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="status" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">status</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.header.status</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">//Default separator
char SEPARATOR = &apos;,&apos;;


String csvFile = props.get(&quot;coreOutputFolder&quot;)+vars.get(&quot;CsvPath_GetAccountSummary&quot;)


def params = [vars.get(&quot;accountNo&quot;).toString(),vars.get(&quot;status&quot;).toString()];

//function write line in csv
def writeLine(FileWriter writer, List&lt;String&gt; parameters, char separator) throws IOException {
    boolean firstParameter = true;
    StringBuilder stringBuilder = new StringBuilder();
    String parameter = &quot; &quot;;

    for (int i = 0; i &lt; parameters.size(); i++) {
        //get param
        parameter = parameters[i];
        log.info(parameter);

        //if the first param in the line, separator is not needed
        if (!firstParameter) {
            stringBuilder.append(separator);
        }

        //Add param to line
        stringBuilder.append(parameter);

        firstParameter = false;
    }

    //prepare file to next line
    stringBuilder.append(&quot;\n&quot;);

    //add to file the line
    log.info(stringBuilder.toString());
    writer.append(stringBuilder.toString());
}

FileWriter fileWriter = new FileWriter(csvFile, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.header.status</stringProp>
              <stringProp name="EXPECTED_VALUE">success</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="+++ Capture Bill +++" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-945317333">
            <stringProp name="806559005">${CaptureBill_Threads}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="1925630855">${CaptureBill_RampUp}</stringProp>
            <stringProp name="447339367">${CaptureBill_SteadyState}</stringProp>
            <stringProp name="-615384800">${CaptureBill_RampDown}</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://10.10.90.40:9446/MDIDELIV/api/v1.0.0/product/captureBill/</stringProp>
              <stringProp name="Authorization.username">INPUTT</stringProp>
              <stringProp name="Authorization.password">123456</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
          </collectionProp>
          <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
        </AuthManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config_inputsheet" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">C:/Users/Smartec/Documents/jmeter/APIs/CaptureBill_input.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">Account</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="+++ Capture Bill +++" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="+++ Capture Bill +++" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;header&quot;:{&#xd;
       &quot;override&quot;: {&#xd;
        &quot;overrideDetails&quot;: [&#xd;
            {&#xd;
                &quot;code&quot;: &quot;O-12187&quot;,&#xd;
                &quot;description&quot;: &quot;Statement would get generated both on schedule date and the date defined in statement condition for CRINTEREST DRINTEREST&quot;,&#xd;
                &quot;id&quot;: &quot;AA.PS.DUPLICATE.STATEMENT.GENERATE&quot;,&#xd;
                &quot;type&quot;: &quot;Override&quot;&#xd;
            },&#xd;
            {&#xd;
                &quot;code&quot;: &quot;O-10987&quot;,&#xd;
                &quot;description&quot;: &quot;Activity would CAPITALISE a charge(CARDISSUE) of 250.00&quot;,&#xd;
                &quot;id&quot;: &quot;AA.CHG.FOR.CURR.ACT&quot;,&#xd;
                &quot;type&quot;: &quot;Override&quot;&#xd;
            }&#xd;
        ]&#xd;
    }&#xd;
    },&#xd;
    &quot;body&quot;:{&#xd;
        &quot;productId&quot;:&quot;MDI.CURRENT.DEFAULT&quot;,&#xd;
        &quot;activityId&quot;:&quot;ACCOUNTS-CAP.CARDISSUE-ARRANGEMENT&quot;,&#xd;
        &quot;narrative&quot;:&quot;JOJO&quot;,&#xd;
        &quot;properties&quot;: [&#xd;
			{&#xd;
				&quot;propertyId&quot;: &quot;CARDISSUE&quot;,&#xd;
				&quot;fields&quot;: [&#xd;
					{&#xd;
						&quot;fieldName&quot;: &quot;FIXED.AMOUNT&quot;,&#xd;
						&quot;fieldValue&quot;: &quot;250&quot;&#xd;
					}&#xd;
				]&#xd;
			}&#xd;
		]&#xd;
         &#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">10.10.90.40</stringProp>
            <stringProp name="HTTPSampler.port">9446</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/MDIDELIV/api/v1.0.0/product/captureBill/${Account}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.header.status</stringProp>
              <stringProp name="EXPECTED_VALUE">success</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="companyId" elementType="Header">
                  <stringProp name="Header.name">companyId</stringProp>
                  <stringProp name="Header.value">EG0011001</stringProp>
                </elementProp>
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">1838b61d-20f7-4ae6-ae81-4854c6405b30</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.31.1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="+++ Block Amount +++" enabled="false">
        <collectionProp name="ultimatethreadgroupdata"/>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="+++ Block Amount +++" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="+++ Block Amount +++" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;header&quot;:{&#xd;
        &quot;override&quot;: {&#xd;
        &quot;overrideDetails&quot;: [&#xd;
            {&#xd;
                &quot;code&quot;: &quot;O-11065&quot;,&#xd;
                &quot;description&quot;: &quot;Ac 200000000506 Today&apos;s Balance EGP 0 will fall below Locked 5 from 20210830&quot;,&#xd;
                &quot;id&quot;: &quot;ACCT.BAL.LT.LOCKED&quot;,&#xd;
                &quot;type&quot;: &quot;Override&quot;&#xd;
            }&#xd;
        ]&#xd;
    }&#xd;
    },&#xd;
	&quot;body&quot;: {&#xd;
		&quot;accountID&quot;: &quot;${AccountID}&quot;&#xd;
         &quot;lockedAmount&quot;: &quot;${amount}&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">10.10.90.40</stringProp>
            <stringProp name="HTTPSampler.port">9446</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/MDIDELIV/api/v1.0.0/holdings/create/lockedAmount</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">b7a4cf6a-f3c7-430f-8bdb-ec330935d7c7</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.31.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="filename">D:/MDI Performance/Holdamount.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames">AccountID</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.header.status</stringProp>
              <stringProp name="EXPECTED_VALUE">success</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="+++ Account Closure +++" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="964894728">
            <stringProp name="-209865457">${AccountClosure_Users}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="-1086430858">${AccountClosure_RampUp}</stringProp>
            <stringProp name="-629300520">${AccountClosure_SteadyState}</stringProp>
            <stringProp name="-398733489">${AccountClosure_RampDown}</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">C:/Users/hamza.zaki/Desktop/MDI-Scripts/API-UsingJmeter/CSV_Files/Account Closure/Account_Closure_Input.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames"></stringProp>
        </CSVDataSet>
        <hashTree/>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://10.10.90.40:9446/MDIDELIV/api/v1.0.0/holdings/accountClosure/</stringProp>
              <stringProp name="Authorization.username">INPUTT</stringProp>
              <stringProp name="Authorization.password">123456</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
          </collectionProp>
          <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
        </AuthManager>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="+++ Account Closure +++" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="+++ Account Closure +++" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&#xd;
  &quot;header&quot;: {&#xd;
&#xd;
   &#xd;
&#xd;
  },&#xd;
&#xd;
  &quot;body&quot;: {&#xd;
&#xd;
    &quot;parties&quot;: [&#xd;
&#xd;
      {&#xd;
&#xd;
        &quot;partyId&quot;: &quot;${partyId_Closure}&quot;&#xd;
&#xd;
      }&#xd;
&#xd;
    ],&#xd;
&#xd;
    &quot;activityId&quot;: &quot;ACCOUNTS-CLOSE-ARRANGEMENT&quot;,&#xd;
&#xd;
    &quot;effectiveDate&quot;: &quot;${effectiveDate_Closure}&quot;,&#xd;
&#xd;
    &quot;currencyId&quot;: &quot;EGP&quot;,&#xd;
&#xd;
    &quot;productId&quot;: &quot;MDI.CURRENT.DEFAULT&quot;&#xd;
&#xd;
  }&#xd;
&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">10.10.90.40</stringProp>
            <stringProp name="HTTPSampler.port">9446</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/MDIDELIV/api/v1.0.0/holdings/accountClosure/${Account_IDClosure}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">effectiveDate 20230302</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="companyId" elementType="Header">
                  <stringProp name="Header.name">companyId</stringProp>
                  <stringProp name="Header.value">EG0011001</stringProp>
                </elementProp>
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">fac3b301-9861-447a-93cc-011d76bd5208</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.31.1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ACC_ClosureID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..arrangementId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.header.status</stringProp>
              <stringProp name="EXPECTED_VALUE">success</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">//Default separator
char SEPARATOR = &apos;,&apos;;


String csvFile = props.get(&quot;coreOutputFolder&quot;)+vars.get(&quot;CsvPath_AccountClosureAA_ID&quot;)


def params = [&quot;Account closure AA&quot;,vars.get(&quot;ACC_ClosureID&quot;).toString(),&quot;&quot;,&quot;&quot;];

//function write line in csv
def writeLine(FileWriter writer, List&lt;String&gt; parameters, char separator) throws IOException {
    boolean firstParameter = true;
    StringBuilder stringBuilder = new StringBuilder();
    String parameter = &quot; &quot;;

    for (int i = 0; i &lt; parameters.size(); i++) {
        //get param
        parameter = parameters[i];
        log.info(parameter);

        //if the first param in the line, separator is not needed
        if (!firstParameter) {
            stringBuilder.append(separator);
        }

        //Add param to line
        stringBuilder.append(parameter);

        firstParameter = false;
    }

    //prepare file to next line
    stringBuilder.append(&quot;\n&quot;);

    //add to file the line
    log.info(stringBuilder.toString());
    writer.append(stringBuilder.toString());
}

FileWriter fileWriter = new FileWriter(csvFile, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="+++ Deposits Create TD +++" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="1807995759">
            <stringProp name="841537648">${CreateTD_Threads}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="-567092780">${CreateTD_RampUp}</stringProp>
            <stringProp name="1509668154">${CreateTD_SteadyState}</stringProp>
            <stringProp name="468953133">${CreateTD_RampDown}</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://10.10.90.40:9446/MDICORE/api/v2.0.0/holdings/deposits/</stringProp>
              <stringProp name="Authorization.username">INPUTT</stringProp>
              <stringProp name="Authorization.password">123456</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
          </collectionProp>
          <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
        </AuthManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="companyId" elementType="Header">
              <stringProp name="Header.name">companyId</stringProp>
              <stringProp name="Header.value">EG0011001</stringProp>
            </elementProp>
            <elementProp name="Postman-Token" elementType="Header">
              <stringProp name="Header.name">Postman-Token</stringProp>
              <stringProp name="Header.value">6ba9a857-9078-40da-aace-d4dbe29cdab8</stringProp>
            </elementProp>
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Cache-Control" elementType="Header">
              <stringProp name="Header.name">Cache-Control</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">PostmanRuntime/7.31.1</stringProp>
            </elementProp>
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">*/*</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config_input" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">C:/Users/Smartec/Documents/jmeter/APIs/CreateTD.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">Currency,Customer,Amount,Payinaccount ,Payoutaccount1 ,Payoutaccount2</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="+++ Create TD +++" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="+++ Create TD +++" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;header&quot;:{&#xd;
         &quot;override&quot;: {&#xd;
        &quot;overrideDetails&quot;: [&#xd;
            {&#xd;
                &quot;code&quot;: &quot;O-12443&quot;,&#xd;
                &quot;description&quot;: &quot;Entered value is lesser than minimum negotiation value of 5000 by 4000 in field AMOUNT.1.1&quot;,&#xd;
                &quot;id&quot;: &quot;AA.ECT.MIN.BELOW&quot;,&#xd;
                &quot;type&quot;: &quot;Override&quot;&#xd;
            },&#xd;
            {&#xd;
                &quot;code&quot;: &quot;O-10985&quot;,&#xd;
                &quot;description&quot;: &quot;Maturity Date is not a Working Day&quot;,&#xd;
                &quot;id&quot;: &quot;AA.MATURITY.DATE.NOT.WORKING.DAY&quot;,&#xd;
                &quot;type&quot;: &quot;Override&quot;&#xd;
            },&#xd;
            {&#xd;
                &quot;code&quot;: &quot;O-11270&quot;,&#xd;
                &quot;description&quot;: &quot;Customer 2000000019 - Post No Debits&quot;,&#xd;
                &quot;id&quot;: &quot;POSTING.RESTRICT.CUST&quot;,&#xd;
                &quot;type&quot;: &quot;Override&quot;&#xd;
            },&#xd;
            {&#xd;
                &quot;code&quot;: &quot;O-11622&quot;,&#xd;
                &quot;description&quot;: &quot;Account 200000003092 - Customer Deceased&quot;,&#xd;
                &quot;id&quot;: &quot;POSTING.RESTRICT&quot;,&#xd;
                &quot;type&quot;: &quot;Override&quot;&#xd;
            },&#xd;
            {&#xd;
                &quot;code&quot;: &quot;O-12005&quot;,&#xd;
                &quot;options&quot;: [&#xd;
                    &quot;RECEIVED&quot;,&#xd;
                    &quot;NOT RECEIVED&quot;&#xd;
                ],&#xd;
                &quot;description&quot;: &quot;Have you received Deposit Agreement/AAA*207 from 2000000019}RECEIVED_NOT RECEIVED&quot;,&#xd;
                &quot;id&quot;: &quot;DM.CONFIRM.DOC&quot;,&#xd;
                &quot;type&quot;: &quot;Warning&quot;,&#xd;
                &quot;responseCode&quot;:&quot;RECEIVED&quot;&#xd;
            }&#xd;
        ]&#xd;
    }&#xd;
    },&#xd;
	&quot;body&quot;: {&#xd;
		&quot;currency&quot;: &quot;${Currency}&quot;,&#xd;
		&quot;productId&quot;: &quot;MDI.TD.3M.INT.MONTHLY&quot;,&#xd;
		&quot;partyIds&quot;: [&#xd;
			{&#xd;
				&quot;partyId&quot;: &quot;${Customer}&quot;&#xd;
			}&#xd;
		],&#xd;
		&quot;commitment&quot;: {&#xd;
			&quot;amount&quot;: &quot;${Amount}&quot;&#xd;
		},&#xd;
		&quot;settlement&quot;: {&#xd;
			&quot;assocSettlement&quot;: [&#xd;
				{&#xd;
					&quot;reference&quot;: [&#xd;
						{&#xd;
							&quot;payinAccount&quot;: &quot;${Payinaccount}&quot;&#xd;
						}&#xd;
					]&#xd;
				}&#xd;
			],&#xd;
			&quot;payout&quot;: [&#xd;
				{&#xd;
					&quot;property&quot;: [&#xd;
						{&#xd;
							&quot;payoutAccount&quot;: &quot;${Payoutaccount1}&quot;&#xd;
						}&#xd;
					]&#xd;
				},&#xd;
				{&#xd;
					&quot;property&quot;: [&#xd;
						{&#xd;
							&quot;payoutAccount&quot;: &quot;${Payoutaccount2}&quot;&#xd;
						}&#xd;
					]&#xd;
				}&#xd;
			]&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">10.10.90.40</stringProp>
            <stringProp name="HTTPSampler.port">9446</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/MDICORE/api/v2.0.0/holdings/deposits/termDeposits</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.header.status</stringProp>
              <stringProp name="EXPECTED_VALUE">success</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ArrangmentID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">body.arrangementActivity.arrangmentId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">//Default separator
char SEPARATOR = &apos;,&apos;;


String csvFile = props.get(&quot;coreOutputFolder&quot;)+vars.get(&quot;CsvPath_CreateTD&quot;)


def params = [&quot;Arrangment ID&quot;,vars.get(&quot;ArrangmentID&quot;).toString(),&quot;&quot;,&quot;&quot;];

//function write line in csv
def writeLine(FileWriter writer, List&lt;String&gt; parameters, char separator) throws IOException {
    boolean firstParameter = true;
    StringBuilder stringBuilder = new StringBuilder();
    String parameter = &quot; &quot;;

    for (int i = 0; i &lt; parameters.size(); i++) {
        //get param
        parameter = parameters[i];
        log.info(parameter);

        //if the first param in the line, separator is not needed
        if (!firstParameter) {
            stringBuilder.append(separator);
        }

        //Add param to line
        stringBuilder.append(parameter);

        firstParameter = false;
    }

    //prepare file to next line
    stringBuilder.append(&quot;\n&quot;);

    //add to file the line
    log.info(stringBuilder.toString());
    writer.append(stringBuilder.toString());
}

FileWriter fileWriter = new FileWriter(csvFile, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="+++ Create Saving Plan +++" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-1512545920">
            <stringProp name="-957254381">${CreateSavingGoal_threads}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="-761580367">${CreateSavingGoal_RampUp}</stringProp>
            <stringProp name="-203776899">${CreateSavingGoal_SteadyState}</stringProp>
            <stringProp name="-1750024246">${CreateSavingGoal_RampDown}</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://10.10.90.40:9446/MDIDELIV/api/v1.0.0/holdings/deposits/</stringProp>
              <stringProp name="Authorization.username">INPUTT</stringProp>
              <stringProp name="Authorization.password">123456</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
          </collectionProp>
          <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
        </AuthManager>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="+++ Create Saving Plan +++" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="+++ Create Saving Plan +++" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &#xd;
    &quot;header&quot;: {&#xd;
&#xd;
        &quot;override&quot;: {&#xd;
        &quot;overrideDetails&quot;: [&#xd;
            {&#xd;
                &quot;code&quot;: &quot;O-10985&quot;,&#xd;
                &quot;description&quot;: &quot;Maturity Date is not a Working Day&quot;,&#xd;
                &quot;id&quot;: &quot;AA.MATURITY.DATE.NOT.WORKING.DAY&quot;,&#xd;
                &quot;type&quot;: &quot;Override&quot;&#xd;
            },&#xd;
            {&#xd;
                &quot;code&quot;: &quot;O-12443&quot;,&#xd;
                &quot;description&quot;: &quot;Entered value is lesser than minimum negotiation value of 50 by 50 in field ACTUAL.AMT.2.1&quot;,&#xd;
                &quot;id&quot;: &quot;AA.ECT.MIN.BELOW&quot;,&#xd;
                &quot;type&quot;: &quot;Override&quot;&#xd;
            },&#xd;
            {&#xd;
                &quot;code&quot;: &quot;O-11084&quot;,&#xd;
                &quot;description&quot;: &quot;Payment Schedule Start Date is not Working Day&quot;,&#xd;
                &quot;id&quot;: &quot;AA.PS.START.DATE.NOT.WORKING.DAY&quot;,&#xd;
                &quot;type&quot;: &quot;Override&quot;&#xd;
            },&#xd;
            {&#xd;
                &quot;code&quot;: &quot;O-11339&quot;,&#xd;
                &quot;description&quot;: &quot;Actual Amount is Different than Calc Amount&quot;,&#xd;
                &quot;id&quot;: &quot;AA.PS.ACTUAL.DIFF.CALC.AMOUNT&quot;,&#xd;
                &quot;type&quot;: &quot;Override&quot;&#xd;
            }&#xd;
        ]&#xd;
    &#xd;
    }&#xd;
    },&#xd;
    &quot;body&quot;: {&#xd;
        &quot;currency&quot;: &quot;${Currency}&quot;,&#xd;
    &#xd;
        &quot;productId&quot;: &quot;MDI.SAVING.PLAN.WEEKLY&quot;,&#xd;
        &quot;commitment&quot;: {&#xd;
            &quot;amount&quot;:&quot;${amount}&quot;,&#xd;
&#xd;
            &quot;term&quot;: &quot;${term}&quot;&#xd;
&#xd;
        },&#xd;
        &quot;partyIds&quot;: [&#xd;
            {&#xd;
                &quot;partyId&quot;: &quot;${CIF}&quot;&#xd;
&#xd;
            }&#xd;
        ],&#xd;
        &quot;settlement&quot;: {&#xd;
            &quot;assocSettlement&quot;: [&#xd;
                {&#xd;
                    &quot;reference&quot;: [&#xd;
                        {&#xd;
                            &quot;payinAccount&quot;: &quot;${PayinAccount}&quot;&#xd;
&#xd;
                        }&#xd;
                    ]&#xd;
                },&#xd;
                {&#xd;
                    &quot;reference&quot;: [&#xd;
                        {&#xd;
                            &quot;payinAccount&quot;: &quot;${PayinAccount}&quot;&#xd;
                        }&#xd;
                    ]&#xd;
                }&#xd;
            ],&#xd;
            &quot;payout&quot;: [&#xd;
                {&#xd;
                    &quot;property&quot;: [&#xd;
                        {&#xd;
                            &quot;payoutAccount&quot;: &quot;${PayOutAccount}&quot;&#xd;
&#xd;
                        }&#xd;
                    ]&#xd;
                }&#xd;
            ]&#xd;
        },&#xd;
        &quot;schedule&quot;:{&#xd;
            &quot;payment&quot;:[&#xd;
                {&#xd;
                    &quot;payments&quot;:[&#xd;
                        {&#xd;
                            &quot;numberOfPayments&quot;: &quot;3&quot;,&#xd;
                            &quot;adhocPaymentAmount&quot;: &quot;1000&quot;&#xd;
                        }&#xd;
                    ]&#xd;
                }&#xd;
            ]&#xd;
        }&#xd;
    }&#xd;
    }&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">10.10.90.40</stringProp>
            <stringProp name="HTTPSampler.port">9446</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/MDIDELIV/api/v1.0.0/holdings/deposits/termDeposits</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">C:/Users/hamza.zaki/Desktop/MDI-Scripts/API-UsingJmeter/CSV_Files/Create saving goal/CreateSavingGoal.csv</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">Currency,amount ,term ,CIF ,PayinAccount ,PayOutAccount </stringProp>
            </CSVDataSet>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="companyId" elementType="Header">
                  <stringProp name="Header.name">companyId</stringProp>
                  <stringProp name="Header.value">EG0011001</stringProp>
                </elementProp>
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">55cf6f5e-3b7f-4a51-b1ed-bfed8e13c833</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.31.1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Trans-CreatedGoal" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Trans-CreatedGoal</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..arrangmentId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Not_found</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">//Default separator
char SEPARATOR = &apos;,&apos;;


String csvFile = props.get(&quot;coreOutputFolder&quot;)+vars.get(&quot;CsvPath_CreatedGoals&quot;)


def params = [&quot;Created Goals REF&quot;,vars.get(&quot;Trans-CreatedGoal&quot;).toString(),&quot;&quot;,&quot;&quot;];

//function write line in csv
def writeLine(FileWriter writer, List&lt;String&gt; parameters, char separator) throws IOException {
    boolean firstParameter = true;
    StringBuilder stringBuilder = new StringBuilder();
    String parameter = &quot; &quot;;

    for (int i = 0; i &lt; parameters.size(); i++) {
        //get param
        parameter = parameters[i];
        log.info(parameter);

        //if the first param in the line, separator is not needed
        if (!firstParameter) {
            stringBuilder.append(separator);
        }

        //Add param to line
        stringBuilder.append(parameter);

        firstParameter = false;
    }

    //prepare file to next line
    stringBuilder.append(&quot;\n&quot;);

    //add to file the line
    log.info(stringBuilder.toString());
    writer.append(stringBuilder.toString());
}

FileWriter fileWriter = new FileWriter(csvFile, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="CreateSavingGoalAssersion" enabled="true">
              <stringProp name="JSON_PATH">$.header.status</stringProp>
              <stringProp name="EXPECTED_VALUE">success</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="+++ Get Deposit +++" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-826299942">
            <stringProp name="1747683252">${GetDeposit_Threads}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="154874384">${GetDeposit_RampUp}</stringProp>
            <stringProp name="1691165310">${GetDeposit_SteadyState}</stringProp>
            <stringProp name="-1505304215">${GetDeposit_RampDown}</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="+++ Get Deposit +++" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">D:/MDI Performance/GetDepositDetails.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">DepostIDs </stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="companyId" elementType="Header">
                <stringProp name="Header.name">companyId</stringProp>
                <stringProp name="Header.value">EG0011001</stringProp>
              </elementProp>
              <elementProp name="Postman-Token" elementType="Header">
                <stringProp name="Header.name">Postman-Token</stringProp>
                <stringProp name="Header.value">417f3d59-fa4f-4b22-b9fc-341f938f6c71</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">PostmanRuntime/7.31.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="+++ Get Deposit +++" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">10.10.90.40</stringProp>
            <stringProp name="HTTPSampler.port">9446</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/MDICORE/api/v2.0.0/holdings/deposits/${DepostIDs} </stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.header.status</stringProp>
              <stringProp name="EXPECTED_VALUE">success</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="+++ Get Deposits Per Customer +++" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="1933199171">
            <stringProp name="824487665">${Get_DepositPerCus_Threads}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="2064756531">${Get_DepositPerCus_RampUp}</stringProp>
            <stringProp name="842425147">${Get_DepositPerCus_SteadyState}</stringProp>
            <stringProp name="-59596340">${Get_DepositPerCus_RampDown}</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://10.10.90.40:9446/MDICORE/api/v1.0.0/holdings/customers/${DepositsPerCus}/</stringProp>
              <stringProp name="Authorization.username">INPUTT</stringProp>
              <stringProp name="Authorization.password">123456</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
          </collectionProp>
          <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
        </AuthManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">C:/Users/hamza.zaki/Desktop/MDI-Scripts/API-UsingJmeter/CSV_Files/Deposits Per Customer/DepositsPerCus_input.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames"></stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="+++ get Deposits Per Customer +++" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="+++ get Deposits Per Customer +++" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">10.10.90.40</stringProp>
            <stringProp name="HTTPSampler.port">9446</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/MDICORE/api/v1.0.0/holdings/customers/${DepositsPerCus}/deposits</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="companyId" elementType="Header">
                  <stringProp name="Header.name">companyId</stringProp>
                  <stringProp name="Header.value">EG0011001</stringProp>
                </elementProp>
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">c1747e9a-4ce6-4bee-bbbb-3211be33826d</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.31.1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.body..depCurrency</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="+++ Get Payment Order Details +++" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-685848250">
            <stringProp name="1411840792">${GetPaymentOrderDetails_Threads}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="-133053908">${GetPaymentOrderDetails_RampUp}</stringProp>
            <stringProp name="894976994">${GetPaymentOrderDetails_SteadyState}</stringProp>
            <stringProp name="968481413">${GetPaymentOrderDetails_RampDown}</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Get Payment Order Details" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">C:/Users/hamza.zaki/Desktop/MDI-Scripts/API-UsingJmeter/CSV_Files/PaymentOrder/GET-Payment_Details_Input.csv</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="variableNames"></stringProp>
          </CSVDataSet>
          <hashTree/>
          <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
            <collectionProp name="AuthManager.auth_list">
              <elementProp name="" elementType="Authorization">
                <stringProp name="Authorization.url">https://10.10.90.40:9446/MDICORE/api/v2.2.0/order/paymentOrders/</stringProp>
                <stringProp name="Authorization.username">INPUTT</stringProp>
                <stringProp name="Authorization.password">123456</stringProp>
                <stringProp name="Authorization.domain"></stringProp>
                <stringProp name="Authorization.realm"></stringProp>
              </elementProp>
            </collectionProp>
            <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
          </AuthManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Payment Order Details" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">10.10.90.40</stringProp>
            <stringProp name="HTTPSampler.port">9446</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/MDICORE/api/v2.2.0/order/paymentOrders/${PaymentOrderPI}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">${PaymentOrderPI}</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">1f9304b7-b636-4134-8691-3275f7db7c53</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.31.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">transId_ODB</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.body..systemId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$..header.status</stringProp>
              <stringProp name="EXPECTED_VALUE">success</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">//Default separator
char SEPARATOR = &apos;,&apos;;


String csvFile = props.get(&quot;coreOutputFolder&quot;)+vars.get(&quot;CsvPath_GetPaymentOrderDetails&quot;)


def params = [&quot;PaymentOrderODB&quot;,vars.get(&quot;transId_ODB&quot;).toString(),&quot;&quot;,&quot;&quot;];

//function write line in csv
def writeLine(FileWriter writer, List&lt;String&gt; parameters, char separator) throws IOException {
    boolean firstParameter = true;
    StringBuilder stringBuilder = new StringBuilder();
    String parameter = &quot; &quot;;

    for (int i = 0; i &lt; parameters.size(); i++) {
        //get param
        parameter = parameters[i];
        log.info(parameter);

        //if the first param in the line, separator is not needed
        if (!firstParameter) {
            stringBuilder.append(separator);
        }

        //Add param to line
        stringBuilder.append(parameter);

        firstParameter = false;
    }

    //prepare file to next line
    stringBuilder.append(&quot;\n&quot;);

    //add to file the line
    log.info(stringBuilder.toString());
    writer.append(stringBuilder.toString());
}

FileWriter fileWriter = new FileWriter(csvFile, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="+++ Create Outgoing Transfer +++" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-1385012891">
            <stringProp name="-338504599">${CreateOutgoingTransfer_Threads}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="1473050331">${CreateOutgoingTransfer_RampUP}</stringProp>
            <stringProp name="-169538381">${CreateOutgoingTransfer_SteadyState}</stringProp>
            <stringProp name="-1752618156">${CreateOutgoingTransfer_RampDown}</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TestPlan.comments">MT103 PEG Outgoing </stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://10.10.90.40:9446/MDICORE/api/v2.2.0/order/paymentOrders</stringProp>
              <stringProp name="Authorization.username">INPUTT</stringProp>
              <stringProp name="Authorization.password">12345</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
          </collectionProp>
          <boolProp name="AuthManager.clearEachIteration">true</boolProp>
          <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
        </AuthManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Length</stringProp>
              <stringProp name="Header.value">&lt;calculated when request is sent&gt;</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Host</stringProp>
              <stringProp name="Header.value">&lt;calculated when request is sent&gt;</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">*/*</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Connection</stringProp>
              <stringProp name="Header.value">keep-alive</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">C:/Users/hamza.zaki/Desktop/MDI-Scripts/API-UsingJmeter/CSV_Files/API_MT103_PEG_Create Outgoing Transfe/EGRTGS.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames"></stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MT103 PEG Outgoing " enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&#xd;
    &quot;header&quot;: {&#xd;
                &quot;override&quot;: {&#xd;
        &quot;overrideDetails&quot;: [&#xd;
&#xd;
&#xd;
        ]&#xd;
        }&#xd;
    },&#xd;
       &quot;body&quot;:&#xd;
&#xd;
    {&#xd;
&#xd;
        &quot;amount&quot;: &quot;${amount}&quot;,&#xd;
        &quot;paymentCurrencyId&quot;:&quot;${paymentCurrencyId}&quot;,&#xd;
	    &quot;orderingCustomerId&quot;:&quot;${orderingCustomerId}&quot;,&#xd;
        &quot;debitAccountId&quot;: &quot;${debitAccountId}&quot; ,&#xd;
        &quot;beneficiaryAccountId&quot;: &quot;${beneficiaryAccountId}&quot;,&#xd;
        &quot;paymentOrderProductId&quot;:&quot;EGRTGS&quot;, &#xd;
         &quot;accountWithBankBIC&quot;:&quot;${accountWithBankBIC}&quot;&#xd;
&#xd;
    }&#xd;
&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">10.10.90.40</stringProp>
          <stringProp name="HTTPSampler.port">9446</stringProp>
          <stringProp name="HTTPSampler.protocol">HTTPS</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/MDICORE/api/v2.2.0/order/paymentOrders</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="EGRTGS_PI_REF" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">EGRTGS_PI_REF</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.header.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.header.status</stringProp>
            <stringProp name="EXPECTED_VALUE">success</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">//Default separator
char SEPARATOR = &apos;,&apos;;


String csvFile = props.get(&quot;coreOutputFolder&quot;)+vars.get(&quot;CsvPath_CreateEGRTGSPayment&quot;)


def params = [&quot;ID&quot;,vars.get(&quot;EGRTGS Payment&quot;).toString(),vars.get(&quot;EGRTGS_PI_REF&quot;).toString(),&quot;&quot;,&quot;&quot;];

//function write line in csv
def writeLine(FileWriter writer, List&lt;String&gt; parameters, char separator) throws IOException {
    boolean firstParameter = true;
    StringBuilder stringBuilder = new StringBuilder();
    String parameter = &quot; &quot;;

    for (int i = 0; i &lt; parameters.size(); i++) {
        //get param
        parameter = parameters[i];
        log.info(parameter);

        //if the first param in the line, separator is not needed
        if (!firstParameter) {
            stringBuilder.append(separator);
        }

        //Add param to line
        stringBuilder.append(parameter);

        firstParameter = false;
    }

    //prepare file to next line
    stringBuilder.append(&quot;\n&quot;);

    //add to file the line
    log.info(stringBuilder.toString());
    writer.append(stringBuilder.toString());
}

FileWriter fileWriter = new FileWriter(csvFile, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="+++ Payment Reverse +++" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-1779704465">
            <stringProp name="-1390040871">${PaymentReverse_Num_Threads}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="-241426908">${PaymentReverse_RampUp}</stringProp>
            <stringProp name="-1841257750">${PaymentReverse_SteadyState}</stringProp>
            <stringProp name="-98756483">${PaymentReverse_RampDown}</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Defied Variables" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding">PaymentOrderODB</stringProp>
          <stringProp name="filename">D:/MDI/Perfomance/API/API.PaymentReverse.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames"></stringProp>
        </CSVDataSet>
        <hashTree/>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://10.10.90.40:9446/MDIDELIV/api/v1.0.0/party/payment/reverse/</stringProp>
              <stringProp name="Authorization.username">INPUTT</stringProp>
              <stringProp name="Authorization.password">123456</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
          </collectionProp>
          <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
        </AuthManager>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="++PaymentReverse++" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PaymentReverse-1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;header&quot;:{&#xd;
        &quot;override&quot;: {&#xd;
        &quot;overrideDetails&quot;: [&#xd;
            {&#xd;
                &quot;code&quot;: &quot;O-11065&quot;,&#xd;
                &quot;description&quot;: &quot;Ac 200000000182 Today&apos;s Balance EGP 23888112.3 will fall below Locked 25190827.95 from 20220104&quot;,&#xd;
                &quot;id&quot;: &quot;ACCT.BAL.LT.LOCKED&quot;,&#xd;
                &quot;type&quot;: &quot;Override&quot;&#xd;
            },&#xd;
            {&#xd;
                &quot;code&quot;: &quot;O-11065&quot;,&#xd;
                &quot;description&quot;: &quot;Ac 200000000182 Today&apos;s Balance EGP 23888190.8 will fall below Locked 25190827.95 from 20220104&quot;,&#xd;
                &quot;id&quot;: &quot;ACCT.BAL.LT.LOCKED&quot;,&#xd;
                &quot;type&quot;: &quot;Override&quot;&#xd;
            },&#xd;
            {&#xd;
                &quot;code&quot;: &quot;O-10801&quot;,&#xd;
                &quot;description&quot;: &quot;10/01/22 200000000678 AVAILABLE BAL USD -990858.25 BELOW LOCKED AMOUNT 5&quot;,&#xd;
                &quot;id&quot;: &quot;AVAILABLE.LOCKED.OVERDRAFT&quot;,&#xd;
                &quot;type&quot;: &quot;Override&quot;&#xd;
            }&#xd;
        ]&#xd;
    }&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">10.10.90.40</stringProp>
            <stringProp name="HTTPSampler.port">9446</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/MDIDELIV/api/v1.0.0/party/payment/reverse/ODB-${PaymentOrderODB}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">4e9c227c-20ca-4781-85f5-e00dcccf47df</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.31.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.header.status</stringProp>
              <stringProp name="EXPECTED_VALUE">success</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Status ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Status ID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.header.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">//Default separator
char SEPARATOR = &apos;,&apos;;


String csvFile = props.get(&quot;coreOutputFolder&quot;)+vars.get(&quot;CsvPath_PaymentReverse&quot;)


def params = [&quot;PaymentReverse&quot;,vars.get(&quot;Status ID&quot;).toString(),&quot;&quot;,&quot;&quot;];

//function write line in csv
def writeLine(FileWriter writer, List&lt;String&gt; parameters, char separator) throws IOException {
    boolean firstParameter = true;
    StringBuilder stringBuilder = new StringBuilder();
    String parameter = &quot; &quot;;

    for (int i = 0; i &lt; parameters.size(); i++) {
        //get param
        parameter = parameters[i];
        log.info(parameter);

        //if the first param in the line, separator is not needed
        if (!firstParameter) {
            stringBuilder.append(separator);
        }

        //Add param to line
        stringBuilder.append(parameter);

        firstParameter = false;
    }

    //prepare file to next line
    stringBuilder.append(&quot;\n&quot;);

    //add to file the line
    log.info(stringBuilder.toString());
    writer.append(stringBuilder.toString());
}

FileWriter fileWriter = new FileWriter(csvFile, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="+++ Create Standing Order +++" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-2030597629">
            <stringProp name="30270436">${CreateStandingOrder_Threads}</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="1623494624">${CreateStandingOrder_RampUp}</stringProp>
            <stringProp name="1887823534">${CreateStandingOrder_SteadyState}</stringProp>
            <stringProp name="1089473337">${CreateStandingOrder_RampDown}</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Create Standing Order - Input CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">D:/MDI/Jmeter files/Standing Order/Input.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">debitAccount ,creditAccount ,currencyId ,amount ,currentFrequency ,paymentMethod </stringProp>
        </CSVDataSet>
        <hashTree/>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://10.10.90.40:9446/MDICORE/api/v4.0.0/party/customers/</stringProp>
              <stringProp name="Authorization.username">INPUTT</stringProp>
              <stringProp name="Authorization.password">123456</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
          </collectionProp>
          <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
        </AuthManager>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="+++ Create Standing Order +++" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="+++ Create Standing Order +++" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;body&quot;:{&#xd;
        &quot;paymentMethod&quot;: &quot;${paymentMethod}&quot;,&#xd;
        &quot;currentFrequency&quot;:&quot;${currentFrequency}&quot;,&#xd;
        &quot;currencyId&quot;:&quot;${currencyId}&quot;,&#xd;
        &quot;amount&quot;:&quot;${amount}&quot;,&#xd;
        &quot;counterPartyAccountId&quot;:&quot;${creditAccount}&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">10.10.90.40</stringProp>
            <stringProp name="HTTPSampler.port">9446</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/MDICORE/api/v1.0.0/order/standingOrders/${debitAccount}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="companyId" elementType="Header">
                  <stringProp name="Header.name">companyId</stringProp>
                  <stringProp name="Header.value">EG0011001</stringProp>
                </elementProp>
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">7d62e2e4-70c0-422b-b608-7fa92aa8e93b</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.31.1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="status" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">status</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.header.status</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">FAILED</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="uniqueIdentifier" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">uniqueIdentifier</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.header.uniqueIdentifier</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.header.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.header.status</stringProp>
              <stringProp name="EXPECTED_VALUE">success</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">//Default separator
char SEPARATOR = &apos;,&apos;;

String csvFile = props.get(&quot;coreOutputFolder&quot;)+vars.get(&quot;CsvPath_CreateStandingOrder&quot;)


def params = [vars.get(&quot;id&quot;).toString(),vars.get(&quot;uniqueIdentifier&quot;).toString(),vars.get(&quot;status&quot;).toString(),&quot;&quot;,&quot;&quot;];

//function write line in csv
def writeLine(FileWriter writer, List&lt;String&gt; parameters, char separator) throws IOException {
    boolean firstParameter = true;
    StringBuilder stringBuilder = new StringBuilder();
    String parameter = &quot; &quot;;

    for (int i = 0; i &lt; parameters.size(); i++) {
        //get param
        parameter = parameters[i];
        log.info(parameter);

        //if the first param in the line, separator is not needed
        if (!firstParameter) {
            stringBuilder.append(separator);
        }

        //Add param to line
        stringBuilder.append(parameter);

        firstParameter = false;
    }

    //prepare file to next line
    stringBuilder.append(&quot;\n&quot;);

    //add to file the line
    log.info(stringBuilder.toString());
    writer.append(stringBuilder.toString());
}

FileWriter fileWriter = new FileWriter(csvFile, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="+++ Create Sweep +++" enabled="true">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="725358914">
            <stringProp name="393452954">${CreateSweep_Threads}</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="-1689925782">${CreateSweep_RampUp}</stringProp>
            <stringProp name="1688982884">${CreateSweep_SteadyState}</stringProp>
            <stringProp name="-536770493">${CreateSweep_RampDown}</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Create Sweep - Input CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">D:/MDI/Jmeter files/createSweep/Input.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">fromAccount,toAccount,currency,fromAccountMinimumBalance,maximumRequiredBalance,minimumRequiredBalance,frequency </stringProp>
        </CSVDataSet>
        <hashTree/>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://10.10.90.40:9446/MDICORE/api/v1.0.1/order/</stringProp>
              <stringProp name="Authorization.username">INPUTT</stringProp>
              <stringProp name="Authorization.password">123456</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
          </collectionProp>
          <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
        </AuthManager>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="+++ Create Sweep +++" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="+++ Create Sweep +++" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;body&quot;:{&#xd;
        &quot;fromAccountDetails&quot;:[&#xd;
            {&#xd;
            &quot;fromAccountId&quot;:&quot;${fromAccount}&quot;,&#xd;
            &quot;fromAccountBalanceType&quot;:&quot;ACCACCTCOMMISSION&quot;,&#xd;
             &quot;fromAccountCurrency&quot;: &quot;${currency}&quot;,&#xd;
             &quot;fromAccountMinimumBalance&quot;: ${fromAccountMinimumBalance}&#xd;
            }&#xd;
        ],&#xd;
        &quot;toAccountDetails&quot;:[&#xd;
            {&#xd;
            &quot;toAccountId&quot;:&quot;${toAccount}&quot;,&#xd;
            &quot;toAccountBalanceType&quot;:&quot;ACCACCTCOMMISSION&quot;,&#xd;
            &quot;toAccountCurrency&quot;: &quot;${currency}&quot;,&#xd;
            &quot;maximumRequiredBalance&quot;: ${maximumRequiredBalance},&#xd;
            &quot;minimumRequiredBalance&quot;: ${minimumRequiredBalance}&#xd;
            }&#xd;
        ],&#xd;
        &quot;sweepType&quot;:&quot;AR.TWOWAY&quot;,&#xd;
        &quot;sweepName&quot;:&quot;a&quot;,&#xd;
        &quot;frequency&quot;:&quot;${frequency}&quot;&#xd;
        &#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">10.10.90.40</stringProp>
            <stringProp name="HTTPSampler.port">9446</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/MDICORE/api/v1.0.1/order/sweeps</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="companyId" elementType="Header">
                  <stringProp name="Header.name">companyId</stringProp>
                  <stringProp name="Header.value">EG0011001</stringProp>
                </elementProp>
                <elementProp name="Postman-Token" elementType="Header">
                  <stringProp name="Header.name">Postman-Token</stringProp>
                  <stringProp name="Header.value">89e46707-aefa-4434-9c8d-e000bc72f014</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">PostmanRuntime/7.31.1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.header.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="status" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">status</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.header.status</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Failed</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.header.status</stringProp>
              <stringProp name="EXPECTED_VALUE">success</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">//Default separator
char SEPARATOR = &apos;,&apos;;


String csvFile = props.get(&quot;coreOutputFolder&quot;)+vars.get(&quot;CsvPath_CreateSweep&quot;)


def params = [&quot;ID&quot;,vars.get(&quot;id&quot;).toString(),vars.get(&quot;status&quot;).toString(),&quot;&quot;,&quot;&quot;];

//function write line in csv
def writeLine(FileWriter writer, List&lt;String&gt; parameters, char separator) throws IOException {
    boolean firstParameter = true;
    StringBuilder stringBuilder = new StringBuilder();
    String parameter = &quot; &quot;;

    for (int i = 0; i &lt; parameters.size(); i++) {
        //get param
        parameter = parameters[i];
        log.info(parameter);

        //if the first param in the line, separator is not needed
        if (!firstParameter) {
            stringBuilder.append(separator);
        }

        //Add param to line
        stringBuilder.append(parameter);

        firstParameter = false;
    }

    //prepare file to next line
    stringBuilder.append(&quot;\n&quot;);

    //add to file the line
    log.info(stringBuilder.toString());
    writer.append(stringBuilder.toString());
}

FileWriter fileWriter = new FileWriter(csvFile, true);
writeLine(fileWriter, params, SEPARATOR);

//proper close to file
fileWriter.flush();
fileWriter.close();</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>true</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ThreadsStateOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Active Threads Over Time" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">true</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ResponseTimesOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Times Over Time" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">true</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.HitsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Hits per Second" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TransactionsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Transactions per Second" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">true</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.BytesThroughputOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Bytes Throughput Over Time" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ConnectTimesOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Connect Times Over Time" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">true</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.LatenciesOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Latencies Over Time" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>

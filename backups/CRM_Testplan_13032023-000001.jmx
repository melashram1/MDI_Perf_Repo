<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">www.example.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="scheme" elementType="Argument">
            <stringProp name="Argument.name">scheme</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ThinkTime" elementType="Argument">
            <stringProp name="Argument.name">ThinkTime</stringProp>
            <stringProp name="Argument.value">2000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="runNo" elementType="Argument">
            <stringProp name="Argument.name">runNo</stringProp>
            <stringProp name="Argument.value">run1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="basePathExecution" elementType="Argument">
            <stringProp name="Argument.name">basePathExecution</stringProp>
            <stringProp name="Argument.value">execution</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CsvPath_CloseCard" elementType="Argument">
            <stringProp name="Argument.name">CsvPath_CloseCard</stringProp>
            <stringProp name="Argument.value">\\SR_Output_CloseCard.csv</stringProp>
            <stringProp name="Argument.desc">Card Closed</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CloseCard_NUM_Threads" elementType="Argument">
            <stringProp name="Argument.name">CloseCard_NUM_Threads</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CloseCard_RampUp" elementType="Argument">
            <stringProp name="Argument.name">CloseCard_RampUp</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CloseCard_SteadyState" elementType="Argument">
            <stringProp name="Argument.name">CloseCard_SteadyState</stringProp>
            <stringProp name="Argument.value">5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CloseCard_RampDown" elementType="Argument">
            <stringProp name="Argument.name">CloseCard_RampDown</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CsvPath_GetT24AccountDetails" elementType="Argument">
            <stringProp name="Argument.name">CsvPath_GetT24AccountDetails</stringProp>
            <stringProp name="Argument.value">\\SR_Output_GetT24AccountDetails.csv</stringProp>
            <stringProp name="Argument.desc">Get Acount Details</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetT24AccountDetails_NUM_Threads" elementType="Argument">
            <stringProp name="Argument.name">GetT24AccountDetails_NUM_Threads</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetT24AccountDetails_RampUp" elementType="Argument">
            <stringProp name="Argument.name">GetT24AccountDetails_RampUp</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetT24AccountDetails_SteadyState" elementType="Argument">
            <stringProp name="Argument.name">GetT24AccountDetails_SteadyState</stringProp>
            <stringProp name="Argument.value">5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GetT24AccountDetails_RampDown" elementType="Argument">
            <stringProp name="Argument.name">GetT24AccountDetails_RampDown</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ActivateCard_NUM_Threads" elementType="Argument">
            <stringProp name="Argument.name">ActivateCard_NUM_Threads</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ActivateCard_RampUp" elementType="Argument">
            <stringProp name="Argument.name">ActivateCard_RampUp</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ActivateCard_RampDown" elementType="Argument">
            <stringProp name="Argument.name">ActivateCard_RampDown</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ActivateCard_SteadyState" elementType="Argument">
            <stringProp name="Argument.name">ActivateCard_SteadyState</stringProp>
            <stringProp name="Argument.value">5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ReplaceCard_NUM_Threads" elementType="Argument">
            <stringProp name="Argument.name">ReplaceCard_NUM_Threads</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ReplaceCard_RampUp" elementType="Argument">
            <stringProp name="Argument.name">ReplaceCard_RampUp</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ReplaceCard_RampDown" elementType="Argument">
            <stringProp name="Argument.name">ReplaceCard_RampDown</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ReplaceCard_SteadyState" elementType="Argument">
            <stringProp name="Argument.name">ReplaceCard_SteadyState</stringProp>
            <stringProp name="Argument.value">5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UpdateCustomerDataOnT24-Cortex-2_NUM_Threads" elementType="Argument">
            <stringProp name="Argument.name">UpdateCustomerDataOnT24-Cortex-2_NUM_Threads</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.desc">7</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UpdateCustomerDataOnT24-Cortex-2_RampUp" elementType="Argument">
            <stringProp name="Argument.name">UpdateCustomerDataOnT24-Cortex-2_RampUp</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.desc"> SEC 600</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UpdateCustomerDataOnT24-Cortex-2_RampDown" elementType="Argument">
            <stringProp name="Argument.name">UpdateCustomerDataOnT24-Cortex-2_RampDown</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.desc"> SEC 600</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UpdateCustomerDataOnT24-Cortex-2_SteadyState" elementType="Argument">
            <stringProp name="Argument.name">UpdateCustomerDataOnT24-Cortex-2_SteadyState</stringProp>
            <stringProp name="Argument.value">5</stringProp>
            <stringProp name="Argument.desc">7200 SEC 6000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">www.example.com</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp the Run Output folders" enabled="true">
        <stringProp name="TestPlan.comments">This Thread will run before the other threads thats included in the run get executed </stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Defined Variables To Setup Folders and needed files before the run" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="runNo" elementType="Argument">
              <stringProp name="Argument.name">runNo</stringProp>
              <stringProp name="Argument.value">run_${__time(MM_dd_YYYY_HHmm,)}\\</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Folder formate run_month_day_year_hourMins</stringProp>
            </elementProp>
            <elementProp name="basePathExecution" elementType="Argument">
              <stringProp name="Argument.name">basePathExecution</stringProp>
              <stringProp name="Argument.value">execution\\</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CoreFolder" elementType="Argument">
              <stringProp name="Argument.name">CoreFolder</stringProp>
              <stringProp name="Argument.value">Core\\</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CRMFolder" elementType="Argument">
              <stringProp name="Argument.name">CRMFolder</stringProp>
              <stringProp name="Argument.value">CRM\\</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SRsFolder" elementType="Argument">
              <stringProp name="Argument.name">SRsFolder</stringProp>
              <stringProp name="Argument.value">SRs\\</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="IVRFolder" elementType="Argument">
              <stringProp name="Argument.name">IVRFolder</stringProp>
              <stringProp name="Argument.value">IVR\\</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ATMFolder" elementType="Argument">
              <stringProp name="Argument.name">ATMFolder</stringProp>
              <stringProp name="Argument.value">ATM\\</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Create Execution folders for each run" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">//web folder for the Run as a whole with all the systems
def String runNo = vars.get(&quot;runNo&quot;);
def String basePath = vars.get(&quot;basePathExecution&quot;);
new File(basePath+runNo).mkdir()
def String pathBuilderWebFolder = basePath+runNo+&quot;web_&quot;+${__time(MMDDYYYY_HHMM,)};
new File(pathBuilderWebFolder).mkdir()
props.put(&quot;webFolder&quot;, pathBuilderWebFolder)



//Core Execution Run Folder Creation
def String CoreFolder = vars.get(&quot;CoreFolder&quot;);
new File(basePath+runNo+CoreFolder).mkdir();
def String pathBuilderCoreOutputFolder = basePath+runNo+CoreFolder+&quot;output_&quot;+${__time(MMDDYYYY_HHMM,)};
new File(pathBuilderCoreOutputFolder).mkdir();
props.put(&quot;coreOutputFolder&quot;, pathBuilderCoreOutputFolder)

//CRM Execution Run Folder Creation
def String CRMFolder = vars.get(&quot;CRMFolder&quot;);
new File(basePath+runNo+CRMFolder).mkdir();
def String pathBuilderCRMOutputFolder = basePath+runNo+CRMFolder+&quot;output_&quot;+${__time(MMDDYYYY_HHMM,)};
new File(pathBuilderCRMOutputFolder).mkdir();
props.put(&quot;CRMOutputFolder&quot;, pathBuilderCRMOutputFolder)

//IVR Execution Run Folder Creation
def String IVRFolder = vars.get(&quot;IVRFolder&quot;);
new File(basePath+runNo+IVRFolder).mkdir();
def String pathBuilderIVROutputFolder = basePath+runNo+IVRFolder+&quot;output_&quot;+${__time(MMDDYYYY_HHMM,)};
new File(pathBuilderIVROutputFolder).mkdir();
props.put(&quot;IVROutputFolder&quot;,pathBuilderIVROutputFolder)

//SRs Execution Run Folder Creation
def String SRsFolder = vars.get(&quot;SRsFolder&quot;);
new File(basePath+runNo+SRsFolder).mkdir();
def String pathBuilderSRsOutputFolder = basePath+runNo+SRsFolder+&quot;output_&quot;+${__time(MMDDYYYY_HHMM,)};
new File(pathBuilderSRsOutputFolder).mkdir();
props.put(&quot;SRsOutputFolder&quot;,pathBuilderSRsOutputFolder)

//ATM Execution Run Folder Creation
def String ATMFolder = vars.get(&quot;ATMFolder&quot;);
new File(basePath+runNo+ATMFolder).mkdir();
def String pathBuilderATMOutputFolder = basePath+runNo+ATMFolder+&quot;output_&quot;+${__time(MMDDYYYY_HHMM,)};
new File(pathBuilderATMOutputFolder).mkdir();
props.put(&quot;ATMOutputFolder&quot;,pathBuilderATMOutputFolder)



</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="+++ Reset Pin Tries +++" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1370726934000</longProp>
        <longProp name="ThreadGroup.end_time">1370726934000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="+++ Reset Pin Tries +++" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="+++ Reset Pin Tries +++" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01_CRM_API_ResetPinTries_/domain/v1/system/secure/cards/customer/card/pin-tries/reset" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;cardIdentifier&quot;: {&#xd;
        &quot;pan&quot;: &quot;${pan}&quot;,&#xd;
        &quot;vpan&quot;: &quot;${vpan}&quot;&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">card-management.sit.apps.openshift.dev.mdi</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/domain/v1/system/secure/cards/customer/card/pin-tries/reset</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic ${Token}</stringProp>
                  </elementProp>
                  <elementProp name="Postman-Token" elementType="Header">
                    <stringProp name="Header.name">Postman-Token</stringProp>
                    <stringProp name="Header.value">c3e7cc74-3a2a-4a26-9a03-5301db6934a6</stringProp>
                  </elementProp>
                  <elementProp name="X-Correlation-Id" elementType="Header">
                    <stringProp name="Header.name">X-Correlation-Id</stringProp>
                    <stringProp name="Header.value">${guid}</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">PostmanRuntime/7.31.1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="80988633">Token</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="-776560449">
                    <stringProp name="-3885065">${__base64Encode(MDI:MDI@Atos2021:${customerId},)}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="ResetPinTries" enabled="true">
                <stringProp name="delimiter">,</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="filename">testData\\input\\CRM\\ResetPinTries.csv</stringProp>
                <boolProp name="ignoreFirstLine">true</boolProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="variableNames">customerId,vpan,pan</stringProp>
              </CSVDataSet>
              <hashTree/>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">1000</stringProp>
                <stringProp name="RandomTimer.range">100</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
